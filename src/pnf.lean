import deduction lindenbaum

-- Prenex normal form

universes u v

namespace fopl

variables (L : language.{u})

local infix ` ‚âÉ‚ÇÅ `:80 := ((‚âÉ) : term L ‚Üí term L ‚Üí formula L)

local prefix `‚àè‚ÇÅ `:64 := (has_univ_quantifier.univ : formula L ‚Üí formula L)

local prefix `‚àê‚ÇÅ `:64 := (has_exists_quantifier.ex : formula L ‚Üí formula L)

structure pnf : Type u := 
(quantifier : list bool)
(form : formula L)
(is_openform : form.is_open)

local notation `ùö∑` := bool.tt

local notation `ùö∫` := bool.ff

variables {L}

namespace pnf

def fal : pnf L ‚Üí pnf L
| ‚ü®Q, p, h‚ü© := ‚ü®ùö∑ :: Q, p, h‚ü©

def ex : pnf L ‚Üí pnf L
| ‚ü®Q, p, h‚ü© := ‚ü®ùö∫ :: Q, p, h‚ü©

instance : has_univ_quantifier (pnf L) := ‚ü®pnf.fal‚ü©

instance : has_exists_quantifier (pnf L) := ‚ü®pnf.ex‚ü©

@[simp] lemma fal_eq (Q : list bool) (p : formula L) (h) : (‚àè (‚ü®Q, p, h‚ü© : pnf L) : pnf L) = ‚ü®ùö∑ :: Q, p, h‚ü© := rfl

@[simp] lemma ex_eq (Q : list bool) (p : formula L) (h) : (‚àê (‚ü®Q, p, h‚ü© : pnf L) : pnf L) = ‚ü®ùö∫ :: Q, p, h‚ü© := rfl

@[simp] lemma fal_inj : ‚àÄ (p q : pnf L), (‚àè p : pnf L) = ‚àè q ‚Üî p = q
| ‚ü®Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := by simp

@[simp] lemma ex_inj : ‚àÄ (p q : pnf L), (‚àê p : pnf L) = ‚àê q ‚Üî p = q
| ‚ü®Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := by simp

@[simp] def to_openform : pnf L ‚Üí formula L
| ‚ü®Q, p, h‚ü© := p

@[simp] def to_formula : pnf L ‚Üí formula L
| ‚ü®[], p, h‚ü©     := p
| ‚ü®ùö∑ :: Q, p, h‚ü© := ‚àè to_formula ‚ü®Q, p, h‚ü©
| ‚ü®ùö∫ :: Q, p, h‚ü© := ‚àê to_formula ‚ü®Q, p, h‚ü©

instance : has_coe (pnf L) (formula L) := ‚ü®to_formula‚ü©

def to_formula_inj : ‚àÄ {p q : pnf L}, p.to_formula = q.to_formula ‚Üî p = q
| ‚ü®[],       p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[],       p‚ÇÇ, h‚ÇÇ‚ü© := by simp
| ‚ü®[],       p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®q‚ÇÇ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := by { cases q‚ÇÇ; { simp, intros h, simp[h] at h‚ÇÅ, contradiction } }
| ‚ü®q‚ÇÅ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[],       p‚ÇÇ, h‚ÇÇ‚ü© := by { cases q‚ÇÅ; { simp, intros h, simp[‚Üêh] at h‚ÇÇ, contradiction } }
| ‚ü®q‚ÇÅ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®q‚ÇÇ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := by cases q‚ÇÅ; cases q‚ÇÇ; simp[@to_formula_inj ‚ü®Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü©]

@[simp] def fal_to_formula : ‚àÄ p : pnf L, (‚àè p : pnf L).to_formula = ‚àè p.to_formula
| ‚ü®Q, p, h‚ü©     := by simp

@[simp] def ex_to_formula : ‚àÄ p : pnf L, (‚àê p : pnf L).to_formula = ‚àê p.to_formula
| ‚ü®Q, p, h‚ü©     := by simp

@[simp] def rank : pnf L ‚Üí ‚Ñï := Œª p, p.1.length

def rew (s : ‚Ñï ‚Üí term L) : pnf L ‚Üí pnf L
| ‚ü®Q, p, h‚ü© := ‚ü®Q, p.rew (s^Q.length), by simp[h]‚ü©

instance : has_pow (pnf L) ‚Ñï := ‚ü®Œª p i, p.rew (Œª x, #(x + i))‚ü©

@[simp] lemma rew_to_formula_eq_to_formula_rew : ‚àÄ (p : pnf L) (s : ‚Ñï ‚Üí term L),
  (p.rew s).to_formula = p.to_formula.rew s
| ‚ü®[], p, h‚ü©     s := by simp[rew]
| ‚ü®ùö∑ :: Q, p, h‚ü© s := by simp[rew, ‚Üêrew_to_formula_eq_to_formula_rew ‚ü®Q, p, by simp[h]‚ü© (s^1),
    rewriting_sf_itr.pow_add, show 1 + Q.length = Q.length + 1, from add_comm _ _]
| ‚ü®ùö∫ :: Q, p, h‚ü© s := by simp[rew, ‚Üêrew_to_formula_eq_to_formula_rew ‚ü®Q, p, by simp[h]‚ü© (s^1),
    rewriting_sf_itr.pow_add, show 1 + Q.length = Q.length + 1, from add_comm _ _]

@[simp] lemma pow_to_formula_eq_to_formula_pow (p : pnf L) (i : ‚Ñï) : (p^i).to_formula = p.to_formula^i :=
by simp[formula.pow_eq, rew_to_formula_eq_to_formula_rew, has_pow.pow]

lemma rew_fal (Q : list bool) (p : formula L) {h} (s : ‚Ñï ‚Üí term L) :
  (‚ü®(ùö∑ :: Q), p, h‚ü© : pnf L).rew s = ‚àè (‚ü®Q, p, h‚ü© : pnf L).rew (s^1) :=
by simp[rew, show Q.length + 1 = 1 + Q.length, from add_comm _ _, rewriting_sf_itr.pow_add]

@[simp] lemma rew_fal' : ‚àÄ (p : pnf L) (s : ‚Ñï ‚Üí term L),
  (‚àè p : pnf L).rew s = ‚àè (p.rew (s^1))
| ‚ü®Q, p, h‚ü© s := by simp[rew_fal]

lemma rew_ex (Q : list bool) (p : formula L) {h} (s : ‚Ñï ‚Üí term L) :
  (‚ü®(ùö∫ :: Q), p, h‚ü© : pnf L).rew s = ‚àê (‚ü®Q, p, h‚ü© : pnf L).rew (s^1) :=
by simp[rew, show Q.length + 1 = 1 + Q.length, from add_comm _ _, rewriting_sf_itr.pow_add]

@[simp] lemma rew_ex' : ‚àÄ (p : pnf L) (s : ‚Ñï ‚Üí term L),
  (‚àê p : pnf L).rew s = ‚àê (p.rew (s^1))
| ‚ü®Q, p, h‚ü© s := by simp[rew_ex]

lemma nested_rew (p : pnf L) (s‚ÇÄ s‚ÇÅ) :
  (p.rew s‚ÇÄ).rew s‚ÇÅ = p.rew (Œª x, (s‚ÇÄ x).rew s‚ÇÅ) :=
to_formula_inj.mp (by simp[formula.nested_rew])

@[simp] lemma rew_rank : ‚àÄ (p : pnf L) (s), (p.rew s).rank = p.rank
| ‚ü®[], p, h‚ü©     s := by simp[rew]
| ‚ü®ùö∑ :: Q, p, h‚ü© s := by simp[rew]
| ‚ü®ùö∫ :: Q, p, h‚ü© s := by simp[rew]

@[simp] lemma pow_rank (p : pnf L) (i : ‚Ñï) : (p^i).rank = p.rank :=
by simp[has_pow.pow]

@[simp] def neg : pnf L ‚Üí pnf L
| ‚ü®[], p, h‚ü© := ‚ü®[], ‚Åªp, by simp[h]‚ü©
| ‚ü®ùö∑ :: Q, p, h‚ü© := ‚àê neg ‚ü®Q, p, by simp[h]‚ü©
| ‚ü®ùö∫ :: Q, p, h‚ü© := ‚àè neg ‚ü®Q, p, by simp[h]‚ü©
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf rank‚ü©]}

instance : has_negation (pnf L) := ‚ü®neg‚ü©

@[simp] def imply : pnf L ‚Üí pnf L ‚Üí pnf L
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      := ‚ü®[], p‚ÇÅ ‚ü∂ p‚ÇÇ, by simp[h‚ÇÅ, h‚ÇÇ]‚ü©
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := ‚àè imply (‚ü®[], p‚ÇÅ^1, by simp[h‚ÇÅ]‚ü©) ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü©
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© := ‚àê imply ‚ü®[], p‚ÇÅ^1, by simp[h‚ÇÅ]‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü©
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      := ‚àê imply ‚ü®Q‚ÇÅ, p‚ÇÅ, by simp[h‚ÇÅ]‚ü© ‚ü®[], p‚ÇÇ^1, by simp[h‚ÇÇ]‚ü©
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© :=
    ‚àê (‚àè imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ (by simp[h‚ÇÇ])).rew ƒ±-{1}) : pnf L)
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© :=
    ‚àê (‚àê imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ (by simp[h‚ÇÇ])).rew ƒ±-{1}) : pnf L)
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      := ‚àè imply ‚ü®Q‚ÇÅ, p‚ÇÅ, by simp[h‚ÇÅ]‚ü© ‚ü®[], p‚ÇÇ^1, by simp[h‚ÇÇ]‚ü©
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© :=
    ‚àè (‚àè imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ (by simp[h‚ÇÇ])).rew ƒ±-{1}) : pnf L)
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© :=
    ‚àè (‚àê imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ (by simp[h‚ÇÇ])).rew ƒ±-{1}) : pnf L)
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf (Œª x, x.fst.rank + x.snd.rank)‚ü©]}

instance : has_arrow (pnf L) := ‚ü®imply‚ü©

end pnf

namespace formula

@[simp] def to_pnf : formula L ‚Üí pnf L
| ‚ä§         := ‚ü®[], ‚ä§, by simp‚ü©
| (app p v) := ‚ü®[], app p v, by simp‚ü©
| ((t : term L) ‚âÉ u) := ‚ü®[], (t : term L) ‚âÉ u, by simp‚ü©
| (p ‚ü∂ q) := (to_pnf p).imply (to_pnf q)
| (‚Åªp) := (to_pnf p).neg
| (‚àè (p : formula L)) := ‚àè (to_pnf p)

end formula

lemma equiv_normalize_imply : ‚àÄ (p q : pnf L) (T : theory L),
  (p.imply q).to_formula  ‚âà[T] p.to_formula ‚ü∂ q.to_formula
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      T := by simp
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp, have ih := equiv_normalize_imply ‚ü®[], p‚ÇÅ^1, by simp[h‚ÇÅ]‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü©,
    calc     ‚àè ((pnf.mk ([]) (p‚ÇÅ^1) (by simp[h‚ÇÅ])).imply (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ)).to_formula
        ‚âà[(T)] ‚àè ((pnf.mk ([]) (p‚ÇÅ^1) (by simp[h‚ÇÅ])).to_formula ‚ü∂ (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_univ_of_equiv (ih _)
    ... ‚âà[T] p‚ÇÅ ‚ü∂ ‚àè (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, refine by simp[classical_logic.equiv] } }
| ‚ü®[], p‚ÇÅ, h‚ÇÅ‚ü©      ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp, have ih := equiv_normalize_imply ‚ü®[], p‚ÇÅ^1, by simp[h‚ÇÅ]‚ü© ‚ü®Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü©,
    calc     ‚àê ((pnf.mk ([]) (p‚ÇÅ^1) (by simp[h‚ÇÅ])).imply (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ)).to_formula
        ‚âà[T] ‚àê ((pnf.mk ([]) (p‚ÇÅ^1) (by simp[h‚ÇÅ])).to_formula ‚ü∂ (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_ex_of_equiv (ih _)
    ... ‚âà[T] p‚ÇÅ ‚ü∂ ‚àê (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, simp[classical_logic.equiv] } }
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      T := by { simp, have ih := equiv_normalize_imply ‚ü®Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1),
    calc     ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).imply (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1)).to_formula
        ‚âà[T] ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_ex_of_equiv (ih _)
    ... ‚âà[T] ‚àè (pnf.mk Q‚ÇÅ p‚ÇÅ (by simp[h‚ÇÅ])).to_formula ‚ü∂ p‚ÇÇ
    : by { symmetry, simp[classical_logic.equiv] } }
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp,
    have ih := equiv_normalize_imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}),
    calc     ‚àê ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).imply ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1})).to_formula
        ‚âà[T] ‚àê ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).to_formula ‚ü∂ ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_ex_of_equiv (provable.equiv_univ_of_equiv (ih _))
    ... ‚âà[T] ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (‚àè (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)^1)
    : by { show _ ‚âà[T] _, symmetry, simp[classical_logic.equiv, formula.fal_pow_discard],
           refine provable.equiv_ex_of_equiv (by simp) }
    ... ‚âà[T] ‚àè (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ ‚àè (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, simp [classical_logic.equiv] } }
| ‚ü®ùö∑ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp, 
    have ih := equiv_normalize_imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}),
    calc     ‚àê ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).imply ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1})).to_formula
        ‚âà[T] ‚àê ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).to_formula ‚ü∂ ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_ex_of_equiv (provable.equiv_ex_of_equiv (ih _))
    ... ‚âà[T] ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (‚àê (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)^1)
    : by { show _ ‚âà[T] _, symmetry, simp[classical_logic.equiv, formula.ex_pow_discard],
           refine provable.equiv_ex_of_equiv (by simp) }
    ... ‚âà[T] ‚àè (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ ‚àê (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, simp [classical_logic.equiv] } }
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®[], p‚ÇÇ, h‚ÇÇ‚ü©      T := by { simp, have ih := equiv_normalize_imply ‚ü®Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1),
    calc     ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).imply (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1)).to_formula
        ‚âà[T] ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (pnf.mk ([]) p‚ÇÇ h‚ÇÇ^1).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_univ_of_equiv (ih _)
    ... ‚âà[T] ‚àê (pnf.mk Q‚ÇÅ p‚ÇÅ (by simp[h‚ÇÅ])).to_formula ‚ü∂ p‚ÇÇ
    : by { symmetry, simp[classical_logic.equiv] } }
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∑ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp,
    have ih := equiv_normalize_imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}),
    calc     ‚àè ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).imply ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1})).to_formula
        ‚âà[T] ‚àè ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).to_formula ‚ü∂ ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_univ_of_equiv (provable.equiv_univ_of_equiv (ih _))
    ... ‚âà[T] ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (‚àè (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)^1)
    : by { show _ ‚âà[T] _, symmetry, simp[classical_logic.equiv, formula.fal_pow_discard],
           refine provable.equiv_univ_of_equiv (by simp) }
    ... ‚âà[T] ‚àê (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ ‚àè (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, simp [classical_logic.equiv] } }
| ‚ü®ùö∫ :: Q‚ÇÅ, p‚ÇÅ, h‚ÇÅ‚ü© ‚ü®ùö∫ :: Q‚ÇÇ, p‚ÇÇ, h‚ÇÇ‚ü© T := by { simp, 
    have ih := equiv_normalize_imply (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1) ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}),
    calc     ‚àè ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).imply ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1})).to_formula
        ‚âà[T] ‚àè ‚àê ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ^1).to_formula ‚ü∂ ((pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).rew ƒ±-{1}).to_formula)
    : show _ ‚âà[T] _, from provable.equiv_univ_of_equiv (provable.equiv_ex_of_equiv (ih _))
    ... ‚âà[T] ‚àè ((pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ (‚àê (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula)^1)
    : by { show _ ‚âà[T] _, symmetry, simp[classical_logic.equiv, formula.ex_pow_discard],
           refine provable.equiv_univ_of_equiv (by simp) }
    ... ‚âà[T] ‚àê (pnf.mk Q‚ÇÅ p‚ÇÅ h‚ÇÅ).to_formula ‚ü∂ ‚àê (pnf.mk Q‚ÇÇ p‚ÇÇ h‚ÇÇ).to_formula
    : by { symmetry, simp [classical_logic.equiv] } }
using_well_founded {rel_tac := Œª _ _, `[exact ‚ü®_, measure_wf (Œª x, x.1.rank + x.2.1.rank)‚ü©]}

lemma equiv_normalize_neg : ‚àÄ (p : pnf L) (T : theory L) , T ‚ä¢ p.neg.to_formula ‚ü∑ ‚Åªp.to_formula
| ‚ü®[], p, h‚ü©     T := by simp
| ‚ü®ùö∑ :: Q, p, h‚ü© T := by simp;
    calc ‚àê (pnf.mk Q p (by simp[h])).neg.to_formula ‚âà[T] ‚àê ‚Åª(pnf.mk Q p (by simp[h])).to_formula
    : show _ ‚âà[T] _, from provable.equiv_ex_of_equiv (equiv_normalize_neg ‚ü®Q, p, by simp[h]‚ü© _)
                                                 ... ‚âà[T] ‚Åª‚àè (pnf.mk Q p (by simp[h])).to_formula
    : classical_logic.equiv_neg_of_equiv (provable.equiv_univ_of_equiv (by simp))
| ‚ü®ùö∫ :: Q, p, h‚ü© T := by { simp,
    calc     ‚àè (pnf.mk Q p (by simp[h])).neg.to_formula ‚âà[T] ‚àè ‚Åª(pnf.mk Q p (by simp[h])).to_formula
    : show _ ‚âà[T] _, from provable.equiv_univ_of_equiv (equiv_normalize_neg ‚ü®Q, p, by simp[h]‚ü© _)
                                                    ... ‚âà[T] ‚Åª‚àê (pnf.mk Q p (by simp[h])).to_formula
    : by { simp[has_exists_quantifier.ex, formula.ex, classical_logic.equiv] } }

@[reducible] def formula.normalize (p : formula L) : formula L := p.to_pnf.to_formula

@[reducible] def formula.open (p : formula L) : formula L := p.to_pnf.2

@[simp] lemma formula.open_is_open (p : formula L) : p.open.is_open := p.to_pnf.is_openform

open axiomatic_classical_logic'

lemma equiv_normalize : ‚àÄ (p : formula L) {T : theory L},  T ‚ä¢ p ‚ü∑ p.normalize
| ‚ä§                 T := by simp[formula.normalize]
| (formula.app p v) T := by simp[formula.normalize]
| (t ‚âÉ‚ÇÅ u)          T := by simp[formula.normalize]
| (p ‚ü∂ q)          T :=
    by { simp[formula.normalize], 
         have : T ‚ä¢ p ‚ü∂ q ‚ü∑ (p.to_pnf.to_formula ‚ü∂ q.to_pnf.to_formula) :=  (equiv_imply_of_equiv (equiv_normalize p) (equiv_normalize q)),
         refine equiv_trans this (classical_logic.equiv_symm (equiv_normalize_imply p.to_pnf q.to_pnf T)) }
| (‚Åªp)              T := by { simp[formula.normalize],
    have : T ‚ä¢ ‚Åªp ‚ü∑ ‚Åªp.to_pnf.to_formula, from equiv_neg_of_equiv (equiv_normalize p),
    exact equiv_trans this (equiv_symm (equiv_normalize_neg p.to_pnf T)) }
| (‚àè‚ÇÅ p)           T := by { simp[formula.normalize], refine provable.equiv_univ_of_equiv (equiv_normalize p) }

def formula.rank (p : formula L) : ‚Ñï := p.to_pnf.rank

end fopl