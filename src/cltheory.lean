import deduction semantics

universes u v

namespace fopl
variables {L : language.{u}} (T : theory L) (i : ‚Ñï)

@[simp] def vecterm.equiv (T : theory L) : ‚àÄ n, vecterm L n ‚Üí vecterm L n ‚Üí Prop := Œª _ v‚ÇÅ v‚ÇÇ, T ‚ä¢ v‚ÇÅ ‚â°Ãá v‚ÇÇ

notation v` ‚âÉ[`T :80`] `u:60 := vecterm.equiv T _ v u

@[simp] lemma veq_eq (t u : vecterm L 0) : t ‚â°Ãá u = t =Ãá u := rfl

@[simp] lemma vecterm.equiv_refl (T : theory L) : ‚àÄ {n} (v : vecterm L n), T ‚ä¢ v ‚â°Ãá v
| 0     _                  := by simp[vecterm.equiv]
| (n+1) (vecterm.cons t v) := by { simp[vecterm.equiv], exact vecterm.equiv_refl v}

private lemma vecterm.equiv_symm (T : theory L) : ‚àÄ {n} {v‚ÇÅ v‚ÇÇ : vecterm L n},
  T ‚ä¢ v‚ÇÅ ‚â°Ãá v‚ÇÇ ‚Üí T ‚ä¢ v‚ÇÇ ‚â°Ãá v‚ÇÅ
| 0     _                    _                    := by simp[vecterm.equiv, provable.eq_symm]
| (n+1) (vecterm.cons t‚ÇÅ v‚ÇÅ) (vecterm.cons t‚ÇÇ v‚ÇÇ) :=
    by { simp[vecterm.equiv, provable.eq_symm], refine Œª h‚ÇÅ h‚ÇÇ, ‚ü®h‚ÇÅ, vecterm.equiv_symm h‚ÇÇ‚ü© }

private lemma vecterm.equiv_trans (T : theory L) : ‚àÄ {n} {v‚ÇÅ v‚ÇÇ v‚ÇÉ : vecterm L n},
  T ‚ä¢ v‚ÇÅ ‚â°Ãá v‚ÇÇ ‚Üí T ‚ä¢ v‚ÇÇ ‚â°Ãá v‚ÇÉ ‚Üí T ‚ä¢ v‚ÇÅ ‚â°Ãá v‚ÇÉ
| 0     _                 _ _ := by simp[vecterm.equiv]; exact provable.eq_trans
| (n+1) (vecterm.cons t‚ÇÅ v‚ÇÅ) (vecterm.cons t‚ÇÇ v‚ÇÇ) (vecterm.cons t‚ÇÉ v‚ÇÉ) := 
    by {simp[vecterm.equiv], refine Œª e‚ÇÅ h‚ÇÅ e‚ÇÇ h‚ÇÇ, ‚ü®provable.eq_trans e‚ÇÅ e‚ÇÇ, vecterm.equiv_trans h‚ÇÅ h‚ÇÇ‚ü© }

theorem vecterm_equiv_equivalence (T : theory L) : equivalence (Œª t‚ÇÅ t‚ÇÇ, T ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ) :=
‚ü®Œª _, by simp, Œª _ _ , provable.eq_symm.mp, Œª _ _ _, provable.eq_trans‚ü©

@[reducible, simp, instance]
def herbrand (n : ‚Ñï) : setoid (term L) := ‚ü®Œª t‚ÇÅ t‚ÇÇ, T^n ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ, vecterm_equiv_equivalence (T^n)‚ü©

def Herbrand (n : ‚Ñï) : Type u := quotient (herbrand T n)

def vecterm.quo (T : theory L) (n : ‚Ñï) (t : term L) : Herbrand T n := quotient.mk' t

notation `‚ü¶`v`‚üß·¥¥.`T :max := vecterm.quo T _ v
notation `‚ü¶`v`‚üß·¥¥` :max := vecterm.quo _ _ v

local infix ` ‚âã `:80 := (@setoid.vec_r _ (herbrand T _) _)

instance (T : theory L) (n) : inhabited (Herbrand T n) := ‚ü®‚ü¶#0‚üß·¥¥.T‚ü©

namespace Herbrand
variables {T} {i}

@[elab_as_eliminator]
protected lemma ind_on {C : Herbrand T i ‚Üí Prop} (d : Herbrand T i)
  (h : ‚àÄ t : term L, C ‚ü¶t‚üß·¥¥) : C d :=
quotient.induction_on' d h

@[elab_as_eliminator, reducible]
protected def lift_on {œÜ} (d : Herbrand T i) (f : term L ‚Üí œÜ)
  (h : ‚àÄ v u : term L, T^i ‚ä¢ v =Ãá u ‚Üí f v = f u) : œÜ :=
quotient.lift_on' d f h

@[simp]
protected lemma lift_on_eq {œÜ} (t : term L) (f : term L ‚Üí œÜ)
  (h : ‚àÄ v u, T^i ‚ä¢ v =Ãá u ‚Üí f v = f u) : fopl.Herbrand.lift_on (‚ü¶t‚üß·¥¥ : Herbrand T i) f h = f t := rfl

@[elab_as_eliminator, reducible, simp]
protected def lift_on‚ÇÇ {œÜ} (d‚ÇÅ d‚ÇÇ : Herbrand T i) (f : term L ‚Üí term L ‚Üí œÜ)
  (h : ‚àÄ t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ, (T^i ‚ä¢ t‚ÇÅ =Ãá u‚ÇÅ) ‚Üí (T^i ‚ä¢ t‚ÇÇ =Ãá u‚ÇÇ) ‚Üí f t‚ÇÅ t‚ÇÇ = f u‚ÇÅ u‚ÇÇ) : œÜ :=
quotient.lift_on‚ÇÇ' d‚ÇÅ d‚ÇÇ f h

@[simp]
protected lemma lift_on‚ÇÇ_eq {œÜ} (t u : term L) (f : term L ‚Üí term L ‚Üí œÜ)
  (h : ‚àÄ t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ, (T^i ‚ä¢ t‚ÇÅ =Ãá u‚ÇÅ) ‚Üí (T^i ‚ä¢ t‚ÇÇ =Ãá u‚ÇÇ) ‚Üí f t‚ÇÅ t‚ÇÇ = f u‚ÇÅ u‚ÇÇ) :
  fopl.Herbrand.lift_on‚ÇÇ ‚ü¶t‚üß·¥¥.T ‚ü¶u‚üß·¥¥.T f h = f t u := rfl

lemma of_eq_of {t u : term L} : (‚ü¶t‚üß·¥¥ : Herbrand T i) = ‚ü¶u‚üß·¥¥ ‚Üî (T^i ‚ä¢ t =Ãá u) :=
by simp[vecterm.quo, vecterm.equiv, quotient.eq']

@[elab_as_eliminator, reducible]
protected def lift_on_vec {œÜ} {m} (v : dvector (Herbrand T i) m) (f : dvector (term L) m ‚Üí œÜ)
  (h : ‚àÄ (a b : dvector (term L) m), (@setoid.vec_r _ (herbrand T i) _) a b ‚Üí f a = f b) : œÜ :=
quotient.lift_on_vec v f h

@[simp]
protected lemma lift_on_vec_eq {œÜ} {n} (u : dvector (term L) n) (f : dvector (term L) n ‚Üí œÜ)
  (h : ‚àÄ (v u : dvector (term L) n), (@setoid.vec_r _ (herbrand T i) _) v u ‚Üí f v = f u) :
fopl.Herbrand.lift_on_vec ·µ•‚ü¶u‚üß f h = f u := quotient.lift_on_vec_eq u f h

@[simp] lemma equivs_equals : ‚àÄ {n} (v‚ÇÅ v‚ÇÇ : dvector (term L) (n+1)),
  (@setoid.vec_r _ (herbrand T i) _) v‚ÇÅ v‚ÇÇ ‚Üî (T^i ‚ä¢ v‚ÇÅ.to_vecterm ‚â°Ãá v‚ÇÇ.to_vecterm)
| 0 (t‚ÇÅ :: dvector.nil) (t‚ÇÇ :: dvector.nil) := by { simp, refl }
| (n+1) (t‚ÇÅ :: v‚ÇÅ) (t‚ÇÇ :: v‚ÇÇ) := by { simp[equivs_equals v‚ÇÅ v‚ÇÇ], intros, refl }

def symbol.fn : ‚àÄ {n} (f : L.fn n), dvector (Herbrand T i) n ‚Üí Herbrand T i
| 0     c _ := ‚ü¶vecterm.const c‚üß·¥¥.T
| (n+1) f v := fopl.Herbrand.lift_on_vec v (Œª u : dvector (term L) (n+1), ‚ü¶vecterm.app f (u.to_vecterm)‚üß·¥¥) 
  $ Œª v‚ÇÅ v‚ÇÇ eqn, by { simp[of_eq_of] at*, refine provable.e4.MP eqn }

def function‚ÇÄ (T : theory L) (i) (c : L.fn 0) : Herbrand T i := symbol.fn c dvector.nil
notation `c‚ü™` s `‚ü´‚Å∞` := function‚ÇÄ _ _ s

def function‚ÇÅ (T : theory L) (i) (f : L.fn 1) (h : Herbrand T i) : Herbrand T i := symbol.fn f (h :: dvector.nil)

def function‚ÇÇ (T : theory L) (i) (f : L.fn 2) (h‚ÇÅ h‚ÇÇ : Herbrand T i) : Herbrand T i := symbol.fn f (h‚ÇÅ :: h‚ÇÇ :: dvector.nil)
notation h‚ÇÅ ` f‚ü™` s `‚ü´¬≤ ` h‚ÇÇ :80 := function‚ÇÇ _ _ s h‚ÇÅ h‚ÇÇ

def symbol.pr : ‚àÄ {n} (f : L.pr n), dvector (Herbrand T i) n ‚Üí Prop
| 0     c _ := T ‚ä¢ formula.const c
| (n+1) p v := fopl.Herbrand.lift_on_vec v (Œª u : dvector (term L) (n+1), T^i ‚ä¢ formula.app p (u.to_vecterm))
  $ Œª v‚ÇÅ v‚ÇÇ eqn, by { simp at*, refine ‚ü®(provable.e5.MP eqn).MP, (provable.e5.MP (vecterm.equiv_symm _ eqn)).MP‚ü©  }

def model (T : theory L) : model L := ‚ü®Herbrand T 0, ‚ü¶#0‚üß·¥¥, @symbol.fn _ T 0, @symbol.pr _ T 0‚ü©
notation `ùîó[`T`]` := model T

protected theorem provable_iff {t‚ÇÅ t‚ÇÇ} : T^i ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ ‚Üî (‚ü¶t‚ÇÅ‚üß·¥¥ : Herbrand T i) = ‚ü¶t‚ÇÇ‚üß·¥¥ := by simp[of_eq_of]
protected theorem provable_iff0 {t‚ÇÅ t‚ÇÇ} : T ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ ‚Üî (‚ü¶t‚ÇÅ‚üß·¥¥ : Herbrand T 0) = ‚ü¶t‚ÇÇ‚üß·¥¥ := by simp[of_eq_of]

@[simp] theorem const_function‚ÇÄ_eq {c : L.fn 0} : ‚ü¶vecterm.const c‚üß·¥¥ = function‚ÇÄ T i c := rfl
@[simp] theorem vecterm_app_function‚ÇÅ_eq {f : L.fn 1} {t} : ‚ü¶vecterm.app f t‚üß·¥¥ = function‚ÇÅ T i f ‚ü¶t‚üß·¥¥ := rfl 
@[simp] theorem vecterm_app_function‚ÇÇ_eq {f : L.fn 2} {t‚ÇÅ t‚ÇÇ} :
  ‚ü¶vecterm.app f (t‚ÇÅ ::: t‚ÇÇ)‚üß·¥¥ = function‚ÇÇ T i f ‚ü¶t‚ÇÅ‚üß·¥¥ ‚ü¶t‚ÇÇ‚üß·¥¥ := rfl 

def sf :
  Herbrand T i ‚Üí Herbrand T (i+1) :=
Œª h, Herbrand.lift_on h (Œª u, ‚ü¶u.sf‚üß·¥¥ : term L ‚Üí Herbrand T (i+1)) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { simp[Herbrand.of_eq_of, -provable.iff] at*,
  rw [show t‚ÇÅ.sf =Ãá t‚ÇÇ.sf = (t‚ÇÅ =Ãá t‚ÇÇ).sf, by simp, provable.sf_sf], exact hyp }

@[simp] def sf_simp (t : term L) : (‚ü¶t‚üß·¥¥ : Herbrand T i).sf = ‚ü¶t.sf‚üß·¥¥ := rfl

namespace proper

@[simp] def subst_sf_H_aux [proper : proper 0 T] (t : term L) :
  Herbrand T (i+1) ‚Üí Herbrand T i :=
Œª h, Herbrand.lift_on h (Œª u, ‚ü¶u.rew (‚Çõ[t]^i)‚üß·¥¥ : term L ‚Üí Herbrand T i) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { simp[Herbrand.of_eq_of, -provable.iff] at*,
    have : ordered (T^i), from @fopl.ordered_theory_sf_itr _ T fopl.ordered_proper i,
    have lmm : T^i ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ, exactI provable.inclusion hyp (ordered_inclusion _),
    refine provable.ppc_prove_rew i lmm ‚Çõ[t] }

variables [proper 0 T]

def subst_sf_H : Herbrand T 0 ‚Üí Herbrand T (i+1) ‚Üí Herbrand T i :=
Œª t h, Herbrand.lift_on t (Œª t, subst_sf_H_aux t h : term L ‚Üí Herbrand T i) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { induction h using fopl.Herbrand.ind_on,
  simp[Herbrand.of_eq_of, -provable.iff] at*, 
  refine provable.equal_rew_equals_term h (‚Çõ[t‚ÇÅ]^i) (‚Çõ[t‚ÇÇ]^i) (Œª m, _),
  have C : m < i ‚à® m = i ‚à® i < m, from trichotomous m i,
  cases C,
  { simp[C] }, cases C; simp[C],
  have := provable.sf_itr_sf_itr.mpr hyp, simp at this, refine this }
notation h‚ÇÅ ` ‚ä≥·¥¥[`:90 n `] `h‚ÇÇ :90  := subst_sf_H n h‚ÇÅ h‚ÇÇ
infix ` ‚ä≥·¥¥ ` :90  := subst_sf_H

@[simp] lemma subst_sf_H_function‚ÇÅ {h‚ÇÅ : Herbrand T 0} {h‚ÇÇ : Herbrand T (i+1)} {f} :
  h‚ÇÅ ‚ä≥·¥¥ (function‚ÇÅ _ _ f h‚ÇÇ) = function‚ÇÅ _ _ f (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÇ) :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     show ‚ü¶h‚ÇÅ‚üß·¥¥ ‚ä≥·¥¥ function‚ÇÅ T (i + 1) f ‚ü¶h‚ÇÇ‚üß·¥¥ = function‚ÇÅ T i f (‚ü¶h‚ÇÅ‚üß·¥¥ ‚ä≥·¥¥ ‚ü¶h‚ÇÇ‚üß·¥¥),
     rw ‚Üê vecterm_app_function‚ÇÅ_eq,
     simp[-vecterm_app_function‚ÇÅ_eq, subst_sf_H, Herbrand.of_eq_of], refl }

@[simp] lemma subst_sf_H_function‚ÇÇ
  {h‚ÇÅ : Herbrand T 0} {h‚ÇÇ h‚ÇÉ : Herbrand T (i+1)} {f} :
  h‚ÇÅ ‚ä≥·¥¥ (function‚ÇÇ _ _ f h‚ÇÇ h‚ÇÉ) = function‚ÇÇ _ _ f (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÇ) (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÉ) :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on,
     induction h‚ÇÇ using fopl.Herbrand.ind_on,
     induction h‚ÇÉ using fopl.Herbrand.ind_on,
     rw ‚Üê vecterm_app_function‚ÇÇ_eq,
     simp[-vecterm_app_function‚ÇÇ_eq, subst_sf_H, Herbrand.of_eq_of], refl }

@[simp] lemma subst_sf_H_sentence (h : Herbrand T 0) {t : term L} (a : t.arity = 0) :
  h ‚ä≥·¥¥ (‚ü¶t‚üß·¥¥ : Herbrand T (i+1)) = ‚ü¶t‚üß·¥¥ :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of, a] }

@[simp] lemma subst_sf_H_var0 (h : Herbrand T 0) :
  h ‚ä≥·¥¥ ‚ü¶#0‚üß·¥¥ = h :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of] }

end proper

end Herbrand

lemma empty_has_model : ‚àÉ ùîÑ : model L, ùîÑ ‚äß‚Çú‚Çï (‚àÖ : theory L) :=
‚ü®ùîó[‚àÖ], Œª p h, by { exfalso, refine set.not_mem_empty p h }‚ü©

theorem empty_consistent : theory.consistent (‚àÖ : theory L) := @model_consistent L ùîó[‚àÖ] ‚àÖ
(Œª p h, by { exfalso, refine set.not_mem_empty p h })

theorem formula_equiv_equivalence : equivalence (formula.equiv T) :=
‚ü®Œª _, by simp[formula.equiv], Œª _ _, by simp[formula.equiv]; exact Œª h‚ÇÅ h‚ÇÇ, ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©,
 Œª _ _ _, by { simp[formula.equiv], intros h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ, refine ‚ü®h‚ÇÅ.imp_trans h‚ÇÉ, h‚ÇÑ.imp_trans h‚ÇÇ‚ü© }‚ü©

def Lindenbaum : Type u :=
quotient (‚ü®formula.equiv (T^i), formula_equiv_equivalence (T^i)‚ü© : setoid (formula L))

def formula.quo (T : theory L) (i) (p : formula L) : Lindenbaum T i := quotient.mk' p

notation `‚ü¶`p`‚üß·¥∏.`T :max := formula.quo T _ p
notation `‚ü¶`p`‚üß·¥∏` :max := formula.quo _ _ p

namespace Lindenbaum
open provable Herbrand
variables {T} {i}

@[elab_as_eliminator]
protected lemma ind_on {C : Lindenbaum T i ‚Üí Prop} (d : Lindenbaum T i)
  (h : ‚àÄ p : formula L, C ‚ü¶p‚üß·¥∏) : C d :=
quotient.induction_on' d h

@[elab_as_eliminator, reducible]
protected def lift_on {œÜ} (d : Lindenbaum T i) (f : formula L ‚Üí œÜ)
  (h : ‚àÄ p q : formula L, T^i ‚ä¢ p ‚ÜîÃá q ‚Üí f p = f q) : œÜ :=
quotient.lift_on' d f h

@[simp]
protected lemma lift_on_eq {œÜ} (p : formula L) (f : formula L ‚Üí œÜ)
  (h : ‚àÄ p q, T^i ‚ä¢ p ‚ÜîÃá q ‚Üí f p = f q) : fopl.Lindenbaum.lift_on ‚ü¶p‚üß·¥∏ f h = f p := rfl

@[elab_as_eliminator, reducible, simp]
protected def lift_on‚ÇÇ {œÜ} (d‚ÇÅ d‚ÇÇ : Lindenbaum T i) (f : formula L ‚Üí formula L ‚Üí œÜ)
  (h : ‚àÄ p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ, T^i ‚ä¢ p‚ÇÅ ‚ÜîÃá q‚ÇÅ ‚Üí T^i ‚ä¢ p‚ÇÇ ‚ÜîÃá q‚ÇÇ ‚Üí f p‚ÇÅ p‚ÇÇ = f q‚ÇÅ q‚ÇÇ) : œÜ :=
quotient.lift_on‚ÇÇ' d‚ÇÅ d‚ÇÇ f h

@[simp]
protected lemma lift_on‚ÇÇ_eq {œÜ} (p q : formula L) (f : formula L ‚Üí formula L ‚Üí œÜ)
  (h : ‚àÄ p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ, T^i ‚ä¢ p‚ÇÅ ‚ÜîÃá q‚ÇÅ ‚Üí T^i ‚ä¢ p‚ÇÇ ‚ÜîÃá q‚ÇÇ ‚Üí f p‚ÇÅ p‚ÇÇ = f q‚ÇÅ q‚ÇÇ) :
  fopl.Lindenbaum.lift_on‚ÇÇ ‚ü¶p‚üß·¥∏.T ‚ü¶q‚üß·¥∏.T f h = f p q := rfl

protected lemma of_eq_of {p q : formula L} : (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶q‚üß·¥∏ ‚Üî T^i ‚ä¢ p ‚ÜîÃá q :=
by simp[formula.quo, formula.equiv, quotient.eq']

instance : has_le (Lindenbaum T i) :=
‚ü®Œª p‚ÇÅ p‚ÇÇ, Lindenbaum.lift_on‚ÇÇ p‚ÇÅ p‚ÇÇ (Œª p‚ÇÅ p‚ÇÇ, T^i ‚ä¢ p‚ÇÅ ‚ÜíÃá p‚ÇÇ) $
 Œª p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ hp hq, by { simp at*,
   exact ‚ü®Œª h, (hp.2.imp_trans h).imp_trans hq.1, Œª h, (hp.1.imp_trans h).imp_trans hq.2‚ü© }‚ü©

instance : has_lt (Lindenbaum T i) := ‚ü®Œª l k, l ‚â§ k ‚àß ¬¨k ‚â§ l‚ü©

def imply : Lindenbaum T i ‚Üí Lindenbaum T i ‚Üí Lindenbaum T i :=
Œª p‚ÇÅ p‚ÇÇ, Lindenbaum.lift_on‚ÇÇ p‚ÇÅ p‚ÇÇ (Œª p‚ÇÅ p‚ÇÇ, (‚ü¶p‚ÇÅ ‚ÜíÃá p‚ÇÇ‚üß·¥∏ : Lindenbaum T i)) $
 Œª p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ hp hq, by { simp[Lindenbaum.of_eq_of] at*, split,
   { refine provable.deduction.mp (provable.deduction.mp _),
     have : (T^i)+{p‚ÇÅ ‚ÜíÃá p‚ÇÇ}+{q‚ÇÅ} ‚ä¢ p‚ÇÅ, from (show _ ‚ä¢ q‚ÇÅ ‚ÜíÃá p‚ÇÅ, by simp[hp]).MP (by simp),
     have : (T^i)+{p‚ÇÅ ‚ÜíÃá p‚ÇÇ}+{q‚ÇÅ} ‚ä¢ p‚ÇÇ, from (show _ ‚ä¢ p‚ÇÅ ‚ÜíÃá p‚ÇÇ, by simp).MP this,
     exact (show (T^i)+{p‚ÇÅ ‚ÜíÃá p‚ÇÇ}+{q‚ÇÅ} ‚ä¢ p‚ÇÇ ‚ÜíÃá q‚ÇÇ, by simp[hq]).MP this },
   { refine provable.deduction.mp (provable.deduction.mp _),
     have : (T^i)+{q‚ÇÅ ‚ÜíÃá q‚ÇÇ}+{p‚ÇÅ} ‚ä¢ q‚ÇÅ, from (show _ ‚ä¢ p‚ÇÅ ‚ÜíÃá q‚ÇÅ, by simp[hp]).MP (by simp),
     have : (T^i)+{q‚ÇÅ ‚ÜíÃá q‚ÇÇ}+{p‚ÇÅ} ‚ä¢ q‚ÇÇ, from (show _ ‚ä¢ q‚ÇÅ ‚ÜíÃá q‚ÇÇ, by simp).MP this,
     exact (show _ ‚ä¢ q‚ÇÇ ‚ÜíÃá p‚ÇÇ, by simp[hq]).MP this } }
infixr ` ‚äë `:60 := imply

instance : has_inf (Lindenbaum T i) :=
‚ü®Œª p‚ÇÅ p‚ÇÇ, Lindenbaum.lift_on‚ÇÇ p‚ÇÅ p‚ÇÇ (Œª p‚ÇÅ p‚ÇÇ, ‚ü¶p‚ÇÅ ‚©ë p‚ÇÇ‚üß·¥∏) $
 Œª p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ hp hq, by { simp[Lindenbaum.of_eq_of] at*, split,
   { apply provable.deduction.mp,
     have : (T^i)+{p‚ÇÅ ‚©ë p‚ÇÇ} ‚ä¢ p‚ÇÅ ‚©ë p‚ÇÇ, from provable.add _ _, simp at *,
     refine ‚ü®(show (T^i)+{p‚ÇÅ ‚©ë p‚ÇÇ} ‚ä¢ p‚ÇÅ ‚ÜíÃá q‚ÇÅ, by simp[hp]).MP this.1,
       (show (T^i)+{p‚ÇÅ ‚©ë p‚ÇÇ} ‚ä¢ p‚ÇÇ ‚ÜíÃá q‚ÇÇ, by simp[hq]).MP this.2‚ü© },
   { apply provable.deduction.mp,
     have : (T^i)+{q‚ÇÅ ‚©ë q‚ÇÇ} ‚ä¢ q‚ÇÅ ‚©ë q‚ÇÇ, from provable.add _ _, simp at *,
     refine ‚ü®(show (T^i)+{q‚ÇÅ ‚©ë q‚ÇÇ} ‚ä¢ q‚ÇÅ ‚ÜíÃá p‚ÇÅ, by simp[hp]).MP this.1,
       (show (T^i)+{q‚ÇÅ ‚©ë q‚ÇÇ} ‚ä¢ q‚ÇÇ ‚ÜíÃá p‚ÇÇ, by simp[hq]).MP this.2‚ü© } }‚ü©

instance : has_sup (Lindenbaum T i) :=
‚ü®Œª p‚ÇÅ p‚ÇÇ, Lindenbaum.lift_on‚ÇÇ p‚ÇÅ p‚ÇÇ (Œª p‚ÇÅ p‚ÇÇ, ‚ü¶p‚ÇÅ ‚©í p‚ÇÇ‚üß·¥∏) $
 Œª p‚ÇÅ p‚ÇÇ q‚ÇÅ q‚ÇÇ hp hq, by { simp[Lindenbaum.of_eq_of] at*, split,
   { refine (provable.deduction.mp ((provable.or_l _ _).MP (provable.deduction.mpr hp.1))).hyp_or
       (provable.deduction.mp ((provable.or_r _ _).MP (provable.deduction.mpr hq.1))) },
   { refine (provable.deduction.mp ((provable.or_l _ _).MP (provable.deduction.mpr hp.2))).hyp_or
       (provable.deduction.mp ((provable.or_r _ _).MP (provable.deduction.mpr hq.2))) }  }‚ü©

instance : has_compl (Lindenbaum T i) :=
‚ü®Œª p, Lindenbaum.lift_on p (Œª p, ‚ü¶¬¨Ãáp‚üß·¥∏) $
 Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[provable.contrapose, Lindenbaum.of_eq_of] at*, refine ‚ü®hyp.2, hyp.1‚ü© }‚ü©

instance : has_top (Lindenbaum T i) := ‚ü®‚ü¶‚ä§Ãá‚üß·¥∏‚ü©

instance : has_bot (Lindenbaum T i) := ‚ü®‚ü¶‚ä•Ãá‚üß·¥∏‚ü©

@[simp] def predicate : ‚àÄ {n} (f : L.pr n), dvector (Herbrand T i) n ‚Üí Lindenbaum T i
| 0     c _ := ‚ü¶formula.const c‚üß·¥∏
| (n+1) p v := fopl.Herbrand.lift_on_vec v (Œª u : dvector (term L) (n+1), ‚ü¶formula.app p (u.to_vecterm)‚üß·¥∏.T)
  $ Œª v‚ÇÅ v‚ÇÇ eqn, by { simp[Lindenbaum.of_eq_of] at*,
  refine ‚ü®provable.e5.MP eqn, provable.e5.MP (vecterm.equiv_symm _ eqn)‚ü© }

def predicate‚ÇÅ (T : theory L) (i) (f : L.pr 1) (h : Herbrand T i) : Lindenbaum T i :=
predicate f (h :: dvector.nil)

def predicate‚ÇÇ (T : theory L) (i) (f : L.pr 2) (h‚ÇÅ h‚ÇÇ : Herbrand T i) : Lindenbaum T i :=
predicate f (h‚ÇÅ :: h‚ÇÇ :: dvector.nil)

def equal : Herbrand T i ‚Üí Herbrand T i ‚Üí Lindenbaum T i :=
Œª h‚ÇÅ h‚ÇÇ, fopl.Herbrand.lift_on‚ÇÇ h‚ÇÅ h‚ÇÇ (Œª t‚ÇÅ t‚ÇÇ, (‚ü¶t‚ÇÅ =Ãá t‚ÇÇ‚üß·¥∏ : Lindenbaum T i)) $
Œª t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ eqn‚ÇÅ eqn‚ÇÇ, by {
  simp[Lindenbaum.of_eq_of], refine ‚ü®provable.deduction.mp _, provable.deduction.mp  _‚ü©,
  have lmm‚ÇÅ : (T^i)+{t‚ÇÅ =Ãá t‚ÇÇ} ‚ä¢ u‚ÇÅ =Ãá t‚ÇÅ, simp [provable.e2.MP eqn‚ÇÅ],
  have lmm‚ÇÇ : (T^i)+{t‚ÇÅ =Ãá t‚ÇÇ} ‚ä¢ t‚ÇÅ =Ãá t‚ÇÇ, simp,
  have lmm‚ÇÉ : (T^i)+{t‚ÇÅ =Ãá t‚ÇÇ} ‚ä¢ t‚ÇÇ =Ãá u‚ÇÇ, simp [eqn‚ÇÇ],
  refine (lmm‚ÇÅ.eq_trans lmm‚ÇÇ).eq_trans lmm‚ÇÉ,
  have lmm‚ÇÅ : (T^i)+{u‚ÇÅ =Ãá u‚ÇÇ} ‚ä¢ t‚ÇÅ =Ãá u‚ÇÅ, simp [eqn‚ÇÅ],
  have lmm‚ÇÇ : (T^i)+{u‚ÇÅ =Ãá u‚ÇÇ} ‚ä¢ u‚ÇÅ =Ãá u‚ÇÇ, simp,
  have lmm‚ÇÉ : (T^i)+{u‚ÇÅ =Ãá u‚ÇÇ} ‚ä¢ u‚ÇÇ =Ãá t‚ÇÇ, simp [provable.e2.MP eqn‚ÇÇ],
  refine (lmm‚ÇÅ.eq_trans lmm‚ÇÇ).eq_trans lmm‚ÇÉ }
infix ` ‚à• `:60 := equal

def Box : Lindenbaum T i ‚Üí Prop := Œª p, Lindenbaum.lift_on p (Œª p, T^i ‚ä¢ p) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp at*, refine ‚ü®Œª h, hyp.1.MP h, Œª h, hyp.2.MP h‚ü© }
prefix `‚ñ°`:80 := Box

def refutable : Lindenbaum T i ‚Üí Prop := Œª p, ¬¨‚ñ°p·∂ú
prefix `‚óá`:80 := refutable

lemma le_antisymm {l k : Lindenbaum T i} : l ‚â§ k ‚Üí k ‚â§ l ‚Üí l = k :=
begin
  induction l using fopl.Lindenbaum.ind_on,
  induction k using fopl.Lindenbaum.ind_on,
  simp[has_le.le, Lindenbaum.of_eq_of], refine Œª h‚ÇÅ h‚ÇÇ, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
end
lemma Box_iff {l : Lindenbaum T i} : ‚ä§ ‚â§ l ‚Üî ‚ñ°l :=
by { induction l using fopl.Lindenbaum.ind_on, simp[has_top.top, Box, has_le.le] }

lemma imply_le {l k : Lindenbaum T i} : l ‚äë k = ‚ä§ ‚Üî l ‚â§ k := by sorry

lemma provable_AX {p} (h : p ‚àà T) : (‚ü¶p.rew (Œª x, #(x+i))‚üß·¥∏ : Lindenbaum T i) = ‚ä§ :=
by {simp[has_top.top, provable.AX h, Lindenbaum.of_eq_of], simp[provable.sf_itr_sf_itr], exact provable.AX h }

lemma provable_K {l k : Lindenbaum T i} : ‚ñ°(l ‚äë k) ‚Üí ‚ñ°l ‚Üí ‚ñ°k :=
begin
  induction l using fopl.Lindenbaum.ind_on,
  induction k using fopl.Lindenbaum.ind_on,
  simp[imply, Box], refine Œª h‚ÇÅ h‚ÇÇ, h‚ÇÅ.MP h‚ÇÇ
end

@[simp] lemma equal_refl {h : Herbrand T i}  : h ‚à• h = ‚ä§ :=
by induction h using fopl.Herbrand.ind_on; simp[equal, has_top.top, Lindenbaum.of_eq_of]

lemma equal_iff {h‚ÇÅ h‚ÇÇ : Herbrand T i} {p : L.pr 1} : h‚ÇÅ ‚à• h‚ÇÇ = ‚ä§ ‚Üî h‚ÇÅ = h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     simp[Lindenbaum.of_eq_of, equal, has_le.le, imply, has_top.top, Box, predicate‚ÇÅ ],
     exact iff.symm Herbrand.of_eq_of }

@[simp] lemma equal_subst_pr‚ÇÅ {h‚ÇÅ h‚ÇÇ : Herbrand T i} {p : L.pr 1} :
  h‚ÇÅ ‚à• h‚ÇÇ ‚â§ predicate‚ÇÅ T i p h‚ÇÅ ‚äë predicate‚ÇÅ T i p h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
      simp[equal, has_le.le, imply, has_top.top, predicate‚ÇÅ,
        (show (‚ü¶h‚ÇÅ‚üß·¥¥ : Herbrand T i) :: dvector.nil = ·µ•‚ü¶h‚ÇÅ :: dvector.nil‚üß, by refl),
        (show (‚ü¶h‚ÇÇ‚üß·¥¥ : Herbrand T i) :: dvector.nil = ·µ•‚ü¶h‚ÇÇ :: dvector.nil‚üß, by refl) ],
        refine @provable.e5 _ _ _ h‚ÇÅ h‚ÇÇ p }

@[simp] lemma equal_subst_fn‚ÇÅ {h‚ÇÅ h‚ÇÇ : Herbrand T i} {f : L.fn 1} : 
  h‚ÇÅ ‚à• h‚ÇÇ ‚â§ function‚ÇÅ T i f h‚ÇÅ ‚à• function‚ÇÅ T i f h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
      simp[equal, has_le.le, imply, has_top.top, Herbrand.function‚ÇÅ,
        (show (‚ü¶h‚ÇÅ‚üß·¥¥ : Herbrand T i) :: dvector.nil = ·µ•‚ü¶h‚ÇÅ :: dvector.nil‚üß, by refl),
        (show (‚ü¶h‚ÇÇ‚üß·¥¥ : Herbrand T i) :: dvector.nil = ·µ•‚ü¶h‚ÇÇ :: dvector.nil‚üß, by refl) ],
        refine @provable.e4 _ _ _ h‚ÇÅ h‚ÇÇ f }

@[simp] lemma double_inv (l : Lindenbaum T i) : l·∂ú·∂ú = l :=
by induction l using fopl.Lindenbaum.ind_on; simp[Lindenbaum.of_eq_of, has_compl.compl]

lemma eq_symm (h‚ÇÅ h‚ÇÇ : Herbrand T i) : h‚ÇÅ ‚à• h‚ÇÇ = h‚ÇÇ ‚à• h‚ÇÅ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     simp[equal, Lindenbaum.of_eq_of] }

@[simp] lemma provable_one : ‚ñ°(‚ä§ : Lindenbaum T i) :=
by simp[has_top.top, Box]

@[simp] lemma one_maximum (l : Lindenbaum T i) : l ‚â§ ‚ä§ :=
by induction l using fopl.Lindenbaum.ind_on; simp[has_top.top, has_le.le]

@[simp] lemma zero_minimum (l : Lindenbaum T i) : ‚ä• ‚â§ l :=
by induction l using fopl.Lindenbaum.ind_on; simp[has_bot.bot, has_le.le]

lemma mul_le_l (l k : Lindenbaum T i) : l ‚äì k ‚â§ l :=
by { induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
     simp[has_inf.inf, has_le.le], refine provable.deduction.mp _, have := provable.add (T^i) (l ‚©ë k), simp* at* }

lemma mul_le_r (l k : Lindenbaum T i) : l ‚äì k ‚â§ k :=
by { induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
     simp[has_inf.inf, has_le.le], refine provable.deduction.mp _, have := provable.add (T^i) (l ‚©ë k), simp* at* }

lemma add_le_l (l k : Lindenbaum T i) : l ‚â§ l ‚äî k :=
by { induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
     simp[has_sup.sup, has_le.le, provable.or_l] }

lemma add_le_r (l k : Lindenbaum T i) : k ‚â§ l ‚äî k :=
by { induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
     simp[has_sup.sup, has_le.le, provable.or_r] }

private lemma le_trans {l m n : Lindenbaum T i} : l ‚â§ m ‚Üí m ‚â§ n ‚Üí l ‚â§ n :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction m using fopl.Lindenbaum.ind_on,
     induction n using fopl.Lindenbaum.ind_on, simp[has_le.le], refine provable.imp_trans }

private lemma sup_le {l m n : Lindenbaum T i} : l ‚â§ n ‚Üí m ‚â§ n ‚Üí l ‚äî m ‚â§ n :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction m using fopl.Lindenbaum.ind_on,
     induction n using fopl.Lindenbaum.ind_on, simp[has_le.le, has_sup.sup],
     intros h‚ÇÅ h‚ÇÇ, exact provable.hyp_or h‚ÇÅ h‚ÇÇ   }

private lemma le_inf {l m n : Lindenbaum T i} : l ‚â§ m ‚Üí l ‚â§ n ‚Üí l ‚â§ m ‚äì n :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction m using fopl.Lindenbaum.ind_on,
     induction n using fopl.Lindenbaum.ind_on,
     simp[has_le.le, has_inf.inf],
     refine Œª h‚ÇÅ h‚ÇÇ, provable.deduction.mp _, simp,
     refine ‚ü®provable.deduction.mpr h‚ÇÅ, provable.deduction.mpr h‚ÇÇ‚ü©  }

private lemma le_sup_inf {l m n : Lindenbaum T i} : (l ‚äî m) ‚äì (l ‚äî n) ‚â§ l ‚äî m ‚äì n :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction m using fopl.Lindenbaum.ind_on,
     induction n using fopl.Lindenbaum.ind_on,
     simp[has_sup.sup, has_inf.inf, has_le.le, provable.or_r, formula.or],
     refine provable.deduction.mp (provable.deduction.mp _),
     have lmm‚ÇÅ : (T^i)+{(¬¨Ãál ‚ÜíÃá m) ‚©ë (¬¨Ãál ‚ÜíÃá n)}+{¬¨Ãál} ‚ä¢ (¬¨Ãál ‚ÜíÃá m) ‚©ë (¬¨Ãál ‚ÜíÃá n), simp[-provable.and],
     have lmm‚ÇÇ : (T^i)+{(¬¨Ãál ‚ÜíÃá m) ‚©ë (¬¨Ãál ‚ÜíÃá n)}+{¬¨Ãál} ‚ä¢ ¬¨Ãál, simp,
     simp at lmm‚ÇÅ ‚ä¢, refine ‚ü®lmm‚ÇÅ.1.MP lmm‚ÇÇ, lmm‚ÇÅ.2.MP lmm‚ÇÇ‚ü© }

private lemma sup_inf_sdiff (l m : Lindenbaum T i) : l ‚äì m ‚äî l ‚äì m·∂ú = l :=
by { induction l using fopl.Lindenbaum.ind_on, induction m using fopl.Lindenbaum.ind_on,
      simp[Lindenbaum.of_eq_of, has_le.le, has_sup.sup, has_inf.inf, has_compl.compl, has_top.top, formula.or],
      refine ‚ü®contrapose.mp (deduction.mp _), _‚ü©, simp,
      have : ‚àÄ n, (T^i)+{¬¨Ãál} ‚ä¢ ¬¨Ãá(l ‚©ë n),
      { refine Œª n, deduction.mpr (contrapose.mpr (deduction.mp _)),
        have : (T^i)+{l ‚©ë n} ‚ä¢ l ‚©ë n, simp[-provable.and], simp* at* },
      refine ‚ü®this _, this _‚ü©,
      refine deduction.mp (deduction.mp _), simp, refine neg_hyp (deduction.mp _),
      refine explosion (show (T^i)+{l}+{¬¨Ãá(l ‚©ë m)}+{m} ‚ä¢ l ‚©ë m, by simp) (by simp) }

private lemma inf_inf_sdiff (l m : Lindenbaum T i) : l ‚äì m ‚äì (l ‚äì m·∂ú) = ‚ä• :=
by { induction l using fopl.Lindenbaum.ind_on, induction m using fopl.Lindenbaum.ind_on,
     simp[Lindenbaum.of_eq_of, has_le.le, has_sup.sup, has_inf.inf, has_compl.compl, has_bot.bot, formula.or],
     refine deduction.mp (explosion (show (T^i)+{l ‚©ë m ‚©ë (l ‚©ë ¬¨Ãám)} ‚ä¢ m, by simp[axiom_and]) (by simp[axiom_and])) }

private lemma inf_compl_le_bot (l : Lindenbaum T i) : l ‚äì l·∂ú ‚â§ ‚ä• :=
by { induction l using fopl.Lindenbaum.ind_on, simp[has_le.le, has_inf.inf, has_compl.compl, has_bot.bot],
     have : (T^i)+{l ‚©ë ¬¨Ãál} ‚ä¢ l ‚©ë ¬¨Ãál, simp[-provable.and], simp at this,
     refine provable.deduction.mp (provable.explosion this.1 this.2) }

private lemma top_le_sup_compl (l : Lindenbaum T i) : ‚ä§ ‚â§ l ‚äî l·∂ú :=
by induction l using fopl.Lindenbaum.ind_on; simp[has_le.le, has_sup.sup, has_compl.compl, has_top.top, formula.or]

instance : boolean_algebra (Lindenbaum T i) :=
{ bot := ‚ä•,
  top := ‚ä§,
  le  := (‚â§),
  lt  := (<),
  sup := (‚äî),
  inf := (‚äì),
  compl := (Œª l, l·∂ú),
  sdiff := (Œª l m, l ‚äì m·∂ú),
  le_refl := Œª l, by induction l using fopl.Lindenbaum.ind_on; simp[has_le.le],
  le_trans := Œª _ _ _, le_trans,
  lt_iff_le_not_le := Œª _ _, by simp[has_lt.lt],
  le_antisymm := Œª l m, le_antisymm,
  bot_le := zero_minimum,
  le_sup_left := add_le_l,
  le_sup_right := add_le_r,
  sup_le := Œª _ _ _, sup_le,
  inf_le_left := mul_le_l,
  inf_le_right := mul_le_r,
  le_inf := Œª _ _ _, le_inf,
  le_sup_inf := Œª _ _ _, le_sup_inf,
  sup_inf_sdiff := sup_inf_sdiff,
  inf_inf_sdiff := inf_inf_sdiff,
  le_top := one_maximum,
  inf_compl_le_bot := inf_compl_le_bot,
  top_le_sup_compl := top_le_sup_compl,
  sdiff_eq := Œª _ _, rfl }

def fal : Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, Lindenbaum.lift_on p (Œª p, ‚ü¶‚àÄÃá p‚üß·¥∏) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[Lindenbaum.of_eq_of] at*, 
  refine ‚ü®provable.q2.MP (GE hyp.1), provable.q2.MP (GE hyp.2)‚ü© }
prefix `‚àè `:90 := fal

def ex : Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, Lindenbaum.lift_on p (Œª p, ‚ü¶‚àÉÃá p‚üß·¥∏) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[formula.ex, provable.contrapose, Lindenbaum.of_eq_of] at*, 
  refine ‚ü®provable.q2.MP $ GE $ contrapose.mpr hyp.1, provable.q2.MP $ GE $ contrapose.mpr hyp.2‚ü©, }
prefix `‚àê `:90 := ex

def sf : Lindenbaum T i ‚Üí Lindenbaum T (i+1) :=
Œª p, Lindenbaum.lift_on p (Œª p, (‚ü¶p.sf‚üß·¥∏ : Lindenbaum T (i+1))) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[contrapose, -provable.iff, Lindenbaum.of_eq_of] at*,
  exact sf_sf.mpr hyp }

namespace proper

variables [proper 0 T]

@[simp] def subst_sf_L_aux (t : term L) :
  Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, Lindenbaum.lift_on p (Œª p, (‚ü¶p.rew (‚Çõ[t]^i)‚üß·¥∏ : Lindenbaum T i)) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[Lindenbaum.of_eq_of, -provable.iff] at*,
    have lmm : T^i ‚ä¢ p‚ÇÅ ‚ÜîÃá p‚ÇÇ,
    { from provable.inclusion hyp (proper_sf_inclusion T (i.le_succ)) },
    refine provable.ppc_prove_rew i lmm ‚Çõ[t] }

def subst_sf_L : Herbrand T 0 ‚Üí Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª t l, Herbrand.lift_on t (Œª t, subst_sf_L_aux t l) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { induction l using fopl.Lindenbaum.ind_on,
  simp[Lindenbaum.of_eq_of, -provable.iff] at*,
  refine equal_rew_iff _ (Œª m, _),
  have C : m < i ‚à® m = i ‚à® i < m, from trichotomous _ _,
  cases C,
  { simp[C] }, cases C; simp[C],
  { refine provable.sf_itr_sf_itr.mpr hyp } }
infix ` ‚ä≥ `:90  := subst_sf_L

lemma fal_le_subst_sf_L (l : Lindenbaum T 1) (h) : ‚àè  l ‚â§ (h ‚ä≥ l) :=
begin
  induction l using fopl.Lindenbaum.ind_on with p, 
  induction h using fopl.Herbrand.ind_on with t, 
  simp[fal, has_le.le, subst_sf_L]
end

lemma subst_sf_L_le_ex (l : Lindenbaum T 1) (h) : h ‚ä≥ l ‚â§ ‚àê  l :=
begin
  induction l using fopl.Lindenbaum.ind_on, 
  induction h using fopl.Herbrand.ind_on, 
  simp[ex, has_le.le, subst_sf_L],
  apply contrapose.mp, simp[formula.ex],
  rw (show ¬¨Ãá(l.rew ‚Çõ[h]) = (¬¨Ãál).rew ‚Çõ[h], by simp), 
  exact provable.q1
end

@[simp] lemma subst_sf_L_and (h : Herbrand T 0) (l m : Lindenbaum T (i+1)) :
  h ‚ä≥ (l ‚äì m) = h ‚ä≥ l ‚äì h ‚ä≥ m :=
by { induction l using fopl.Lindenbaum.ind_on, induction m using fopl.Lindenbaum.ind_on, 
     induction h using fopl.Herbrand.ind_on,
     simp[has_inf.inf, has_le.le, subst_sf_L, Lindenbaum.of_eq_of] }

@[simp] lemma subst_sf_L_or (h : Herbrand T 0) (l m : Lindenbaum T (i+1)) :
  h ‚ä≥ (l ‚äî m) = h ‚ä≥ l ‚äî h ‚ä≥ m :=
by { induction l using fopl.Lindenbaum.ind_on, induction m using fopl.Lindenbaum.ind_on, 
     induction h using fopl.Herbrand.ind_on,
     simp[has_sup.sup, has_le.le, subst_sf_L, Lindenbaum.of_eq_of] }

@[simp] lemma subst_sf_L_neg (h : Herbrand T 0) (l : Lindenbaum T (i+1)) :
  h ‚ä≥ l·∂ú = (h ‚ä≥ l)·∂ú :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction h using fopl.Herbrand.ind_on,
     simp[has_compl.compl, has_le.le, subst_sf_L, Lindenbaum.of_eq_of] }

@[simp] lemma subst_sf_L_equal (h‚ÇÅ : Herbrand T 0) (h‚ÇÇ h‚ÇÉ : Herbrand T (i+1)) :
  h‚ÇÅ ‚ä≥ (h‚ÇÇ ‚à• h‚ÇÉ) = (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÇ) ‚à• (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÉ) :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     induction h‚ÇÉ using fopl.Herbrand.ind_on,
     simp[equal, subst_sf_L, Herbrand.proper.subst_sf_H, Herbrand.proper.subst_sf_H_aux,
       Lindenbaum.of_eq_of] }

@[simp] lemma subst_sf_L_fal (h : Herbrand T 0) (l : Lindenbaum T (i+2)) :
  h ‚ä≥ ‚àè l = ‚àè (h ‚ä≥ l) :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction h using fopl.Herbrand.ind_on,
     simp[fal, has_le.le, subst_sf_L, Lindenbaum.of_eq_of, has_pow.pow, rewriting_sf_itr] }

@[simp] lemma subst_sf_L_ex (h : Herbrand T 0) (l : Lindenbaum T (i+2)) :
  h ‚ä≥ ‚àê l = ‚àê (h ‚ä≥ l) :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction h using fopl.Herbrand.ind_on,
     simp[ex, has_le.le, subst_sf_L, Lindenbaum.of_eq_of, has_pow.pow, rewriting_sf_itr] }

lemma subst_sf_L_sentence (h : Herbrand T 0) {p : formula L} (a : sentence p) :
  h ‚ä≥ (‚ü¶p‚üß·¥∏ : Lindenbaum T (i+1)) = ‚ü¶p‚üß·¥∏ :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_L, Lindenbaum.of_eq_of, a] }

end proper

@[simp] lemma prod_top : ‚àè (‚ä§ : Lindenbaum T (i+1)) = ‚ä§ :=
by { simp[fal, has_top.top, Lindenbaum.of_eq_of], apply provable.GE, simp }

lemma provable_GE {l : Lindenbaum T (i+1)} : l = ‚ä§ ‚Üí ‚àè l = ‚ä§ :=
by { induction l using fopl.Lindenbaum.ind_on, simp[fal, has_top.top, Lindenbaum.of_eq_of],
     exact provable.GE }

lemma prenex_ex_neg (l : Lindenbaum T (i+1)) : (‚àê l)·∂ú = ‚àè l·∂ú :=
by induction l using fopl.Lindenbaum.ind_on;
   simp[has_compl.compl, ex, fal, Lindenbaum.of_eq_of, formula.ex]

lemma prenex_fal_neg {l : Lindenbaum T (i+1)} : (‚àè l)·∂ú = ‚àê l·∂ú :=
by { have := prenex_ex_neg l·∂ú, simp at this, simp[‚Üêthis] }

lemma prenex_fal_or_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  ‚àè l ‚äî k = ‚àè (l ‚äî sf k) :=
begin
  induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
  simp[fal, has_sup.sup, sf, Lindenbaum.of_eq_of, formula.or], split,
  { refine (deduction.mp $ GE $ contrapose.mp _), rw [‚Üêsf_dsb], simp,
    have lmm‚ÇÅ : ‚áë(T^i)+{¬¨Ãá(‚àÄÃá l).sf ‚ÜíÃá k.sf} ‚ä¢ ¬¨Ãák.sf ‚ÜíÃá (‚àÄÃá l).sf, { apply contrapose.mp, simp },
    have lmm‚ÇÇ : ‚áë(T^i)+{¬¨Ãá(‚àÄÃá l).sf ‚ÜíÃá k.sf} ‚ä¢ (‚àÄÃá l).sf ‚ÜíÃá l,
    { suffices : ‚áë(T^i)+{¬¨Ãá(‚àÄÃá l).sf ‚ÜíÃá k.sf} ‚ä¢ (‚àÄÃá l).sf ‚ÜíÃá (l.rew $ shift^1).rew ‚Çõ[#0],
      { simp* at* },
      exact provable.q1 },
    exact lmm‚ÇÅ.imp_trans lmm‚ÇÇ },
  { refine (deduction.mp $ contrapose.mp $ deduction.mp _), simp,
    refine GE _, simp[‚Üêsf_dsb], refine deduction.mpr _,
    show ‚áë(T^i)+{(‚àÄÃá  (¬¨Ãál ‚ÜíÃá k.sf)).sf} ‚ä¢ ¬¨Ãák.sf ‚ÜíÃá l,
    have : ‚áë(T^i)+{(‚àÄÃá  (¬¨Ãál ‚ÜíÃá k.sf)).sf} ‚ä¢ ¬¨Ãál ‚ÜíÃá k.sf,
    { have : ‚áë(T^i)+{(‚àÄÃá  (¬¨Ãál ‚ÜíÃá k.sf)).sf} ‚ä¢ (‚àÄÃá  (¬¨Ãál ‚ÜíÃá k.sf)).sf, { simp },
      have lmm‚ÇÅ := this.fal_subst #0, simp at lmm‚ÇÅ,
      exact lmm‚ÇÅ },
    apply contrapose.mp, simp[this] }
end

lemma prenex_fal_or_right {l : Lindenbaum T i} {k : Lindenbaum T (i+1)} :
  l ‚äî ‚àè k = ‚àè (sf l ‚äî k) :=
by simp[show l ‚äî ‚àè k = ‚àè k ‚äî l, from sup_comm, prenex_fal_or_left,
        show k ‚äî l.sf = l.sf ‚äî k, from sup_comm]

lemma prenex_fal_and_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  ‚àè l ‚äì k = ‚àè (l ‚äì sf k) :=
begin
  induction l using fopl.Lindenbaum.ind_on, induction k using fopl.Lindenbaum.ind_on,
  simp[fal, has_inf.inf, sf, Lindenbaum.of_eq_of], split,
  { refine (deduction.mp $ GE _), rw [‚Üêsf_dsb], simp[axiom_and],
    have : ‚áë(T^i)+{(‚àÄÃá l).sf}+{k.sf} ‚ä¢ (‚àÄÃá l).sf, simp,
    have := this.fal_subst #0, simp* at* },
  { refine deduction.mp _, simp,
     split,
    { refine GE _, simp[‚Üêsf_dsb],
      have : ‚áë(T^i)+{(‚àÄÃá  (l ‚©ë k.sf)).sf} ‚ä¢ (‚àÄÃá  (l ‚©ë k.sf)).sf, simp,
      have := this.fal_subst #0, simp* at* },
    { have : (T^i)+{‚àÄÃá  (l ‚©ë k.sf)} ‚ä¢ ‚àÄÃá  (l ‚©ë k.sf), simp,
      have := this.fal_subst #0, simp* at * } }
end

lemma prenex_ex_or_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  ‚àê l ‚äî k = ‚àê (l ‚äî sf k) :=
begin
  rw ‚Üê compl_inj_iff, simp[-compl_inj_iff, prenex_ex_neg, prenex_fal_and_left],
end

@[simp] lemma compl_sup_iff_le (l m : Lindenbaum T i) : l·∂ú ‚äî m = ‚ä§ ‚Üî l ‚â§ m :=
by { induction l using fopl.Lindenbaum.ind_on,
     induction m using fopl.Lindenbaum.ind_on,
     simp[has_le.le, has_top.top, has_compl.compl, has_sup.sup, Lindenbaum.of_eq_of, formula.or] }

@[simp] lemma fal_top_top : (‚àè ‚ä§ : Lindenbaum T i) = ‚ä§ :=
by { simp[has_top.top, fal, Lindenbaum.of_eq_of], apply provable.GE, simp }

@[simp] lemma ex_top_top : (‚àê ‚ä§ : Lindenbaum T i) = ‚ä§ :=
by { simp[has_top.top, ex, Lindenbaum.of_eq_of], apply provable.use #0, simp }

theorem provable_top_iff {p} : T^i ‚ä¢ p ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ä§ := by simp[has_top.top, Lindenbaum.of_eq_of]

protected theorem provable_iff {p q} : T^i ‚ä¢ p ‚ÜîÃá q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶q‚üß·¥∏ :=
by simp[Lindenbaum.of_eq_of]

protected theorem provable_iff0 {p q} : T ‚ä¢ p ‚ÜîÃá q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T 0) = ‚ü¶q‚üß·¥∏ :=
by simp[Lindenbaum.of_eq_of]

theorem provable_imp_iff {p q} : T^i ‚ä¢ p ‚ÜíÃá q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) ‚â§ ‚ü¶q‚üß·¥∏ := by simp[has_le.le]

@[simp] lemma provable_top_eq : (‚ü¶‚ä§Ãá‚üß·¥∏ : Lindenbaum T i) = ‚ä§ := rfl
@[simp] lemma provable_bot_eq : (‚ü¶‚ä•Ãá‚üß·¥∏ : Lindenbaum T i) = ‚ä• := rfl
@[simp] theorem provable_and_eq {p q} : (‚ü¶p ‚©ë q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏ ‚äì ‚ü¶q‚üß·¥∏ := rfl
@[simp] theorem provable_or_eq {p q} : (‚ü¶p ‚©í q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏ ‚äî ‚ü¶q‚üß·¥∏ := rfl
@[simp] theorem provable_neg_eq {p} : (‚ü¶¬¨Ãáp‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏·∂ú := rfl
@[simp] theorem provable_imp_eq {p q} : (‚ü¶p ‚ÜíÃá q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏·∂ú ‚äî ‚ü¶q‚üß·¥∏ := by {
  have : (‚ü¶p ‚ÜíÃá q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶¬¨Ãáp ‚©í q‚üß·¥∏, 
  { simp[Lindenbaum.of_eq_of, -provable_or_eq, formula.or], refine ‚ü®deduction.mp (by simp), deduction.mp _‚ü©,
    have : (T^i)+{¬¨Ãá¬¨Ãáp ‚ÜíÃá q} ‚ä¢ ¬¨Ãá¬¨Ãáp ‚ÜíÃá q, simp[-dn1_iff], simp* at* },
  simp[this] }

@[simp] lemma provable_equal_eq {t‚ÇÅ t‚ÇÇ} : (‚ü¶t‚ÇÅ =Ãá t‚ÇÇ‚üß·¥∏ : Lindenbaum T i) = ‚ü¶t‚ÇÅ‚üß·¥¥ ‚à• ‚ü¶t‚ÇÇ‚üß·¥¥ := rfl
@[simp] theorem provable_predicate‚ÇÅ_iff {p : L.pr 1} {t} : (‚ü¶formula.app p t‚üß·¥∏ : Lindenbaum T i) = predicate‚ÇÅ T i p ‚ü¶t‚üß·¥¥ := rfl 
@[simp] theorem provable_predicate‚ÇÇ_iff {p : L.pr 2} {t‚ÇÅ t‚ÇÇ} :
  (‚ü¶formula.app p (vecterm.cons t‚ÇÅ t‚ÇÇ)‚üß·¥∏ : Lindenbaum T i) = predicate‚ÇÇ T i p ‚ü¶t‚ÇÅ‚üß·¥¥ ‚ü¶t‚ÇÇ‚üß·¥¥ := rfl 

@[simp] theorem provable_fal_eq {p} : (‚ü¶‚àÄÃá p‚üß·¥∏ : Lindenbaum T i) = ‚àè  ‚ü¶p‚üß·¥∏ := rfl
@[simp] theorem provable_ex_eq {p} : (‚ü¶‚àÉÃá p‚üß·¥∏ : Lindenbaum T i) = ‚àê  ‚ü¶p‚üß·¥∏ := rfl

lemma to_Herbrand {h‚ÇÅ h‚ÇÇ : Herbrand T i} : h‚ÇÅ ‚à• h‚ÇÇ = ‚ä§ ‚Üî h‚ÇÅ = h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     simp only [equal, Herbrand.of_eq_of, has_top.top],
     simp[-provable_equal_eq, -provable_top_eq, Lindenbaum.of_eq_of] }

theorem provable_neg_iff {p} : T^i ‚ä¢ ¬¨Ãáp ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ä• :=
by simp[provable_top_iff]

end Lindenbaum

end fopl