import tactic lib

/- ÁÑº„ÅçÁõ¥„Åó -/

universe u

namespace fopl

structure language : Type (u+1) :=
(fn : ‚Ñï ‚Üí Type u)
(pr : ‚Ñï ‚Üí Type u)

class has_zero_symbol (L : language) := (zero : L.fn 0)

class has_succ_symbol (L : language) := (succ : L.fn 1)

class has_add_symbol (L : language) := (add : L.fn 2)

class has_mul_symbol (L : language) := (mul : L.fn 2)

class has_le_symbol (L : language) := (le : L.pr 2)

class has_mem_symbol (L : language) := (mem : L.pr 2)

variables (L : language.{u}) (Œ≤ : ‚Ñï)

inductive term : ‚Ñï ‚Üí Type u
| var : ‚àÄ {Œ≤}, fin Œ≤ ‚Üí term Œ≤
| app : ‚àÄ {Œ≤ n}, L.fn n ‚Üí (fin n ‚Üí term Œ≤) ‚Üí term Œ≤

variables {L} {Œ≤}

prefix `#`:max := term.var

notation `‚ù®` c `‚ù© ` v :84 := term.app c v

instance {n} : inhabited (term L (n + 1)) := ‚ü®#0‚ü©

instance [has_zero_symbol L] : has_zero (term L Œ≤) := ‚ü®term.app has_zero_symbol.zero finitary.nil‚ü©

instance [has_succ_symbol L] : has_succ (term L Œ≤) := ‚ü®Œª t, term.app has_succ_symbol.succ ‚Äπt‚Ä∫‚ü©

instance [has_add_symbol L] {Œ≤} : has_add (term L Œ≤) := ‚ü®Œª t u, term.app has_add_symbol.add ‚Äπt, u‚Ä∫‚ü©

instance [has_mul_symbol L] {Œ≤} : has_mul (term L Œ≤) := ‚ü®Œª t u, term.app has_mul_symbol.mul ‚Äπt, u‚Ä∫‚ü©

postfix `Àô`:max := numeral

@[reducible] def idvar (Œ≤ : ‚Ñï) : finitary (term L Œ≤) Œ≤ := Œª i, #i

notation `##` := idvar _

@[simp] lemma idvar_app (Œ≤ : ‚Ñï) (i : fin Œ≤) : (## : finitary (term L Œ≤) Œ≤) i = #i := rfl

variables (L) (Œ≤)

def term_to_string [‚àÄ n, has_to_string (L.fn n)] : Œ† {Œ≤}, term L Œ≤ ‚Üí string
| Œ≤ #n := "#" ++ has_to_string.to_string n
| Œ≤ (@term.app _ _ n c v) :=
    has_to_string.to_string c ++ "(" ++ @has_to_string.to_string (finitary _ _) _ (Œª i, term_to_string (v i)) ++ ")"

instance [‚àÄ n, has_to_string (L.fn n)] {Œ≤} : has_to_string (term L Œ≤) := ‚ü®term_to_string L‚ü©

inductive formula : ‚Ñï ‚Üí Type u
| verum : Œ† {Œ≤}, formula Œ≤
| app   : ‚àÄ {Œ≤ n : ‚Ñï}, L.pr n ‚Üí (fin n ‚Üí term L Œ≤) ‚Üí formula Œ≤
| equal : ‚àÄ {Œ≤}, term L Œ≤ ‚Üí term L Œ≤ ‚Üí formula Œ≤
| imply : ‚àÄ {Œ≤}, formula Œ≤ ‚Üí formula Œ≤ ‚Üí formula Œ≤
| neg   : ‚àÄ {Œ≤}, formula Œ≤ ‚Üí formula Œ≤
| fal   : ‚àÄ {Œ≤}, formula (Œ≤ + 1) ‚Üí formula Œ≤

notation `‚ù¥` c `‚ùµ` := formula.app c

instance [has_le_symbol L] {Œ≤} : has_preceq (term L Œ≤) (formula L Œ≤) := ‚ü®Œª t u, formula.app has_le_symbol.le ‚Äπt, u‚Ä∫‚ü©

instance [has_mem_symbol L] {Œ≤} : has_elem (term L Œ≤) (formula L Œ≤) := ‚ü®Œª t u, formula.app has_mem_symbol.mem ‚Äπt, u‚Ä∫‚ü©

attribute [pattern]  has_eq.eq has_negation.neg has_arrow.arrow has_univ_quantifier.univ has_exists_quantifier.ex

instance : has_top (formula L Œ≤) := ‚ü®formula.verum‚ü©

instance : has_arrow (formula L Œ≤) := ‚ü®formula.imply‚ü©

instance : has_eq (term L Œ≤) (formula L Œ≤) := ‚ü®formula.equal‚ü©

local infix ` ‚âÉ‚ÇÅ `:80 := ((‚âÉ) : term L Œ≤ ‚Üí term L Œ≤ ‚Üí formula L Œ≤)

instance {Œ≤} : has_negation (formula L Œ≤) := ‚ü®formula.neg‚ü©

instance : has_univ_quantifier' (formula L) := ‚ü®Œª Œ≤, formula.fal‚ü©

prefix `‚Ñø`:64 := formula.fal

instance {Œ≤} : has_bot (formula L Œ≤) := ‚ü®‚Åª‚ä§‚ü©

def formula_to_string [‚àÄ Œ≤, has_to_string (term L Œ≤)] [‚àÄ n, has_to_string (L.pr n)] :
  Œ† {Œ≤}, formula L Œ≤ ‚Üí string
| Œ≤ formula.verum                  := "‚ä§"
| Œ≤ (@formula.app _ _ 0 p v)       := has_to_string.to_string p
| Œ≤ (@formula.app _ _ 1 p v)       := has_to_string.to_string p ++ "(" ++ has_to_string.to_string (v 0) ++ ")"
| Œ≤ (@formula.app _ _ 2 p v)       :=
    has_to_string.to_string (v 0) ++ has_to_string.to_string p ++ has_to_string.to_string (v 1)
| Œ≤ (@formula.app _ _ (n + 3) p v) :=
    has_to_string.to_string p ++ "(" ++ @has_to_string.to_string (finitary _ _) _ v ++ ")"
| Œ≤ (formula.equal t u)            := has_to_string.to_string t ++ " = " ++ has_to_string.to_string u
| Œ≤ (formula.imply p q)            := formula_to_string p ++ " ‚Üí " ++ formula_to_string q
| Œ≤ (formula.neg p)                := "¬¨(" ++ formula_to_string p ++ ")"
| Œ≤ (formula.fal p)                := "‚àÄ(" ++ formula_to_string p ++ ")"

instance [‚àÄ Œ≤, has_to_string (term L Œ≤)] [‚àÄ n, has_to_string (L.pr n)] : has_to_string (formula L Œ≤) :=
‚ü®formula_to_string L‚ü©

@[simp] lemma formula.top_eq : @formula.verum L = (‚ä§) := rfl
@[simp] lemma formula.imply_eq : @formula.imply L Œ≤ = (‚ü∂) := rfl
@[simp] lemma formula.equal_eq : @formula.equal L Œ≤ = (‚âÉ) := rfl
@[simp] lemma formula.neg_eq : @formula.neg L Œ≤ = has_negation.neg := rfl
@[simp] lemma formula.fal_eq : @formula.fal L Œ≤ = has_univ_quantifier'.univ := rfl

instance : inhabited (formula L Œ≤) := ‚ü®‚ä§‚ü©

@[reducible] def theory (L : language.{u}) (Œ≤) := set (formula L Œ≤)

variables {L} {Œ≤} {Œ≥ : ‚Ñï}

def formula.and (p : formula L Œ≤) (q : formula L Œ≤) : formula L Œ≤ := ‚Åª(p ‚ü∂ ‚Åªq)

instance : has_inf (formula L Œ≤) := ‚ü®formula.and‚ü©

def formula.or (p : formula L Œ≤) (q : formula L Œ≤) : formula L Œ≤ := ‚Åªp ‚ü∂ q

instance : has_sup (formula L Œ≤) := ‚ü®formula.or‚ü©

def formula.ex (p : formula L (Œ≤ + 1)) : formula L Œ≤ := ‚Åªùö∑‚Åªp

instance : has_exists_quantifier' (formula L) := ‚ü®Œª _, formula.ex‚ü©

lemma formula.ex_eq (p : formula L (Œ≤ + 1)) : (ùö∫ p : formula L Œ≤) = ‚Åªùö∑‚Åªp := rfl

@[simp] lemma formula.equal.inj' (t‚ÇÅ u‚ÇÅ t‚ÇÇ u‚ÇÇ : term L Œ≤) : (t‚ÇÅ ‚âÉ t‚ÇÇ : formula L Œ≤) = (u‚ÇÅ ‚âÉ u‚ÇÇ) ‚Üî t‚ÇÅ = u‚ÇÅ ‚àß t‚ÇÇ = u‚ÇÇ :=
‚ü®formula.equal.inj, by simp; exact congr_arg2 (‚âÉ)‚ü©

@[simp] lemma formula.imply.inj' (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : formula L Œ≤) : p‚ÇÅ ‚ü∂ p‚ÇÇ = q‚ÇÅ ‚ü∂ q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ :=
‚ü®formula.imply.inj, by simp; exact congr_arg2 (‚ü∂)‚ü©

@[simp] lemma formula.neg.inj' (p q : formula L Œ≤) : ‚Åªp = ‚Åªq ‚Üî p = q := ‚ü®formula.neg.inj, congr_arg _‚ü©

@[simp] lemma formula.and.inj' (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : formula L Œ≤) : p‚ÇÅ ‚äì p‚ÇÇ = q‚ÇÅ ‚äì q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ :=
by simp[has_inf.inf, formula.and]

@[simp] lemma formula.or.inj' (p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ : formula L Œ≤) : p‚ÇÅ ‚äî p‚ÇÇ = q‚ÇÅ ‚äî q‚ÇÇ ‚Üî p‚ÇÅ = q‚ÇÅ ‚àß p‚ÇÇ = q‚ÇÇ :=
by simp[has_sup.sup, formula.or]

@[simp] lemma formula.fal.inj' (p q : formula L (Œ≤ + 1)) : ùö∑ p = ùö∑ q ‚Üî p = q := ‚ü®formula.fal.inj, congr_arg _‚ü©

@[simp] lemma formula.ex.inj' (p q : formula L (Œ≤ + 1)) : ùö∫ p = ùö∫ q ‚Üî p = q := 
by simp[has_exists_quantifier'.ex, formula.ex]

@[simp] lemma formula.verum_ne_predicate {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
 ‚ä§ ‚â† formula.app r v.

@[simp] lemma formula.verum_ne_equal (t u : term L Œ≤) : (‚ä§ : formula L Œ≤) ‚â† (t ‚âÉ u).

@[simp] lemma formula.verum_ne_imply (p q : formula L Œ≤) : ‚ä§ ‚â† (p ‚ü∂ q).

@[simp] lemma formula.verum_ne_neg (p : formula L Œ≤) : ‚ä§ ‚â† ‚Åªp.

@[simp] lemma formula.verum_ne_fal (p : formula L (Œ≤ + 1)) : ‚ä§ ‚â† ùö∑ p.

@[simp] lemma formula.predicate_ne_verum {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
  formula.app r v ‚â† ‚ä§.

@[simp] lemma formula.predicate_ne_equal {n} (r : L.pr n) (v : finitary (term L Œ≤) n) (t u : term L Œ≤) :
  formula.app r v ‚â† (t ‚âÉ u).

@[simp] lemma formula.predicate_ne_imply {n} (r : L.pr n) (v : finitary (term L Œ≤) n) (p q : formula L Œ≤) :
  formula.app r v ‚â† p ‚ü∂ q.

@[simp] lemma formula.predicate_ne_neg {n} (r : L.pr n) (v : finitary (term L Œ≤) n) (p : formula L Œ≤) :
  formula.app r v ‚â† ‚Åªp.

@[simp] lemma formula.predicate_ne_fal {n} (r : L.pr n) (v : finitary (term L Œ≤) n) (p) :
  formula.app r v ‚â† ùö∑ p.

@[simp] lemma formula.equal_ne_verum (t u : term L Œ≤) :
  (t ‚âÉ u : formula L Œ≤) ‚â† ‚ä§.

@[simp] lemma formula.equal_ne_predivate (t u : term L Œ≤) {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
  (t ‚âÉ u) ‚â† formula.app r v.

@[simp] lemma formula.equal_ne_imply (t u : term L Œ≤) (p q : formula L Œ≤) :
  (t ‚âÉ u) ‚â† p ‚ü∂ q.

@[simp] lemma formula.equal_ne_neg (t u : term L Œ≤) (p : formula L Œ≤) :
  (t ‚âÉ u) ‚â† ‚Åªp.

@[simp] lemma formula.equal_ne_fal (t u : term L Œ≤) (p) :
  (t ‚âÉ u : formula L Œ≤) ‚â† ùö∑ p.

@[simp] lemma formula.imply_ne_verum (p q : formula L Œ≤) :
  p ‚ü∂ q ‚â† ‚ä§.

@[simp] lemma formula.imply_ne_predicate (p q : formula L Œ≤) {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
  p ‚ü∂ q ‚â† formula.app r v.

@[simp] lemma formula.imply_ne_equal (p q : formula L Œ≤) (t u : term L Œ≤) :
  p ‚ü∂ q ‚â† (t ‚âÉ u).

@[simp] lemma formula.imply_ne_neg (p q r : formula L Œ≤) : p ‚ü∂ q ‚â† ‚Åªr.

@[simp] lemma formula.imply_ne_fal (p q : formula L Œ≤) (r) : p ‚ü∂ q ‚â† ùö∑ r.

@[simp] lemma formula.neg_ne_verum (p : formula L Œ≤) : ‚Åªp ‚â† ‚ä§.

@[simp] lemma formula.neg_ne_predicate (p : formula L Œ≤) {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
 ‚Åªp ‚â† formula.app r v.

@[simp] lemma formula.neg_ne_equal (p : formula L Œ≤) (t u : term L Œ≤) : ‚Åªp ‚â† (t ‚âÉ u).

@[simp] lemma formula.neg_ne_imply (p q r : formula L Œ≤) : ‚Åªp ‚â† (q ‚ü∂ r).

@[simp] lemma formula.neg_ne_fal (p : formula L Œ≤) (q) : ‚Åªp ‚â† ùö∑ q.

@[simp] lemma formula.fal_ne_verum (p : formula L (Œ≤ + 1)) :
  ùö∑ p ‚â† ‚ä§.

@[simp] lemma formula.fal_ne_predicate (p : formula L (Œ≤ + 1)) {n} (r : L.pr n) (v : finitary (term L Œ≤) n) :
  ùö∑ p ‚â† formula.app r v.

@[simp] lemma formula.fal_ne_equal (p : formula L (Œ≤ + 1)) (t u : term L Œ≤) :
  (ùö∑ p : formula L Œ≤) ‚â† (t ‚âÉ u).

@[simp] lemma formula.fal_ne_imp (p : formula L (Œ≤ + 1)) (q r : formula L Œ≤) : ùö∑ p ‚â† (q ‚ü∂ r).

@[simp] lemma formula.fal_ne_neg (p : formula L (Œ≤ + 1)) (q : formula L Œ≤) : ùö∑ p ‚â† ‚Åªq.

@[simp] lemma formula.fal_ne_ex (p q : formula L (Œ≤ + 1)) : ùö∑ p ‚â† ùö∫ q.

@[simp] lemma formula.ex_ne_fal (p q : formula L (Œ≤ + 1)) : ùö∫ p ‚â† ùö∑ q.

@[simp] def nfal_complete : Œ† {Œ≤}, formula L Œ≤ ‚Üí formula L 0
| 0     p := p
| (n+1) p := nfal_complete (ùö∑ p)

prefix `ùö∑* `:64 := nfal_complete

@[simp] def nfal : Œ† n, formula L (Œ≤ + n) ‚Üí formula L Œ≤
| 0     p := p
| (n+1) p := nfal n (ùö∑ p)

notation `ùö∑[` k `] `:90 p := nfal k p

@[simp] def conjunction' : ‚àÄ n, (fin n ‚Üí formula L Œ≤) ‚Üí formula L Œ≤
| 0 _        := ‚ä§
| (n + 1) f  := (f ‚ü®n, lt_add_one n‚ü©) ‚äì conjunction' n (Œª i, f ‚ü®i.val, nat.lt.step i.property‚ü©)

notation `‚ãÄ` binders `, ` r:(scoped p, conjunction' _ p) := r

@[simp] def disjunction' : ‚àÄ n, (fin n ‚Üí formula L Œ≤) ‚Üí formula L Œ≤
| 0 _        := ‚ä•
| (n + 1) f  := (f ‚ü®n, lt_add_one n‚ü©) ‚äî disjunction' n (Œª i, f ‚ü®i.val, nat.lt.step i.property‚ü©)

notation `‚ãÅ` binders `, ` r:(scoped p, disjunction' _ p) := r

def conjunction : list (formula L Œ≤) ‚Üí formula L Œ≤
| []        := ‚ä§
| (p :: ps) := p ‚äì conjunction ps

@[reducible] def Œπ {Œ≤ : ‚Ñï} : fin Œ≤ ‚Üí term L Œ≤ := term.var

namespace term

@[simp] def rew : Œ† {Œ≤ Œ≥}, (finitary (term L Œ≥) Œ≤) ‚Üí term L Œ≤ ‚Üí term L Œ≥
| Œ≤ Œ≥ s (#x)           := s x
| Œ≤ Œ≥ s (term.app f v) := ‚ù®f‚ù© (Œª i, rew s (v i))

@[simp] lemma nested_rew : ‚àÄ {Œ≤ Œ≥ Œ¥} (t : term L Œ≤) (s‚ÇÄ : finitary (term L Œ≥) Œ≤) (s‚ÇÅ : finitary (term L Œ¥) Œ≥),
  (t.rew s‚ÇÄ).rew s‚ÇÅ = t.rew (Œª x, (s‚ÇÄ x).rew s‚ÇÅ)
| Œ≤ Œ≥ Œ¥ (#x)     := by simp[rew]
| Œ≤ Œ≥ Œ¥ (‚ù®f‚ù© v)  := by simp[rew, nested_rew]

@[simp] lemma rew_Œπ (t : term L Œ≤) : t.rew Œπ = t :=
by induction t; simp[rew]; simp*

def shift : Œ† {Œ≤}, term L Œ≤ ‚Üí term L (Œ≤ + 1) := Œª Œ≤ t, t.rew (Œª i, #(i + 1))

instance : has_shift (term L) := ‚ü®@shift L‚ü©

lemma shift_eq (t : term L Œ≤) : ‚§ât = t.rew (Œª i, #(i + 1)) := rfl

lemma pow_eq (t : term L Œ≤) (k) : t ‚Üü k = t.rew (Œª x, #(‚ü®x + k, by simp‚ü©)) :=
by { induction k with k IH; simp[*, shift_eq, nested_rew , ‚Üênat.add_one, add_assoc], refl }

def lift : Œ† {Œ≤}, term L Œ≤ ‚Üí term L (Œ≤ + 1) := Œª Œ≤ t, t.rew (Œª i, #i)

instance : has_shift' (term L) := ‚ü®@lift L‚ü©

@[simp] lemma shift_var (x : fin Œ≤) : ‚§â(#x : term L Œ≤) = #x.succ := by simp[has_shift.shift, shift]

@[simp] lemma lift_var (x : fin Œ≤) : ‚§â'(#x : term L Œ≤) = #x := by simp[has_shift'.shift', lift]

@[simp] lemma shift_function {n} (f : L.fn n) (v : finitary (term L Œ≤) n) :
  ‚§â(term.app f v : term L Œ≤) = term.app f (Œª i, ‚§â(v i)) := by simp[has_shift.shift, shift]

@[simp] lemma lift_function {n} (f : L.fn n) (v : finitary (term L Œ≤) n) :
  ‚§â'(term.app f v : term L Œ≤) = term.app f (Œª i, ‚§â'(v i)) := by simp[has_shift'.shift', lift]

@[reducible] def rew_var (s : fin Œ≤ ‚Üí fin Œ≥) : term L Œ≤ ‚Üí term L Œ≥ := Œª t, t.rew (Œª x, #(s x))

@[simp] lemma constant_rew (c : L.fn 0) (s : finitary (term L Œ≥) Œ≤) {v : finitary (term L Œ≤) 0} :
  (app c v : term L Œ≤).rew s = app c finitary.nil :=
by simp

@[simp] lemma unary_rew (f : L.fn 1) (s : finitary (term L Œ≥) Œ≤) (v : finitary (term L Œ≤) 1) :
  (app f v).rew s = app f ‚Äπ(v 0).rew s‚Ä∫ :=
by simp; ext; simp

@[simp] lemma binary_rew (f : L.fn 2) (s : finitary (term L Œ≥) Œ≤) (v : finitary (term L Œ≤) 2) :
  (app f v).rew s = app f ‚Äπ(v 0).rew s, (v 1).rew s‚Ä∫ :=
by simp; ext; simp

@[simp] lemma zero_rew [h : has_zero_symbol L] (s : finitary (term L Œ≥) Œ≤) : (0 : term L Œ≤).rew s = 0 :=
by unfold has_zero.zero; simp

@[simp] lemma succ_rew [h : has_succ_symbol L] (t : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (Succ t : term L Œ≤).rew s = Succ (t.rew s) :=
by unfold has_succ.succ; simp; ext; simp

@[simp] lemma numeral_rew [h : has_zero_symbol L] [h : has_succ_symbol L] (n : ‚Ñï) (s : finitary (term L Œ≥) Œ≤) :
  (nÀô : term L Œ≤).rew s = nÀô :=
by induction n; simp[*, numeral]

@[simp] lemma add_rew [h : has_add_symbol L] (t u : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (t + u : term L Œ≤).rew s = t.rew s + u.rew s :=
by unfold has_add.add; simp; ext; simp

@[simp] lemma mul_rew [h : has_mul_symbol L] (t u : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (t * u : term L Œ≤).rew s = t.rew s * u.rew s :=
by unfold has_mul.mul; simp; ext; simp

@[simp] lemma var_pow (n : fin Œ≤) (k : ‚Ñï) : (#n : term L Œ≤) ‚Üü k = #‚ü®n + k, by simp‚ü© :=
by induction k with k IH; simp[*, ‚Üênat.add_one, add_assoc]

@[simp] lemma app_pow {n} (f : L.fn n) (v : finitary' (term L) n Œ≤) (k : ‚Ñï) :
  (‚ù®f‚ù© v) ‚Üü k = ‚ù®f‚ù© (v ‚Üü k) :=
by {induction k with k IH; simp*, funext i, simp }

@[simp] lemma app_lift_pow {n} (f : L.fn n) (v : finitary' (term L) n Œ≤) (k : ‚Ñï) :
  (‚ù®f‚ù© v) ‚Üü' k = ‚ù®f‚ù© (v ‚Üü' k) :=
by {induction k with k IH; simp*, funext i, simp }

@[simp] lemma unary_pow (f : L.fn 1) (v : finitary (term L Œ≤) 1) (k : ‚Ñï) :
  (app f v) ‚Üü k = app f ‚Äπ(v 0) ‚Üü k‚Ä∫ :=
by simp; ext; simp

@[simp] lemma unary_lift_pow (f : L.fn 1) (v : finitary (term L Œ≤) 1) (k : ‚Ñï) :
  (app f v) ‚Üü k = app f ‚Äπ(v 0) ‚Üü k‚Ä∫ :=
by simp; ext; simp

@[simp] lemma binary_pow (f : L.fn 2) (v : finitary (term L Œ≤) 2) (k : ‚Ñï) :
  (app f v) ‚Üü k = app f ‚Äπ(v 0) ‚Üü k, (v 1) ‚Üü k‚Ä∫ :=
by simp; ext; simp

@[simp] lemma zero_pow [h : has_zero_symbol L] (k : ‚Ñï) : (0 : term L Œ≤) ‚Üü k = 0 :=
by { unfold has_zero.zero, induction k with k IH; simp* }

@[simp] lemma succ_pow [h : has_succ_symbol L] (t : term L Œ≤) (k : ‚Ñï) : (Succ t : term L Œ≤) ‚Üü k = Succ (t ‚Üü k) :=
by unfold has_succ.succ; simp

@[simp] lemma numeral_pow [h : has_zero_symbol L] [h : has_succ_symbol L] (n : ‚Ñï) (k : ‚Ñï) :
  (nÀô : term L Œ≤) ‚Üü k = nÀô :=
by induction n with n IH; simp[*, numeral]

@[simp] lemma add_pow [h : has_add_symbol L] (t u : term L Œ≤) (k : ‚Ñï) : (t + u : term L Œ≤) ‚Üü k = t ‚Üü k + u ‚Üü k :=
by unfold has_add.add; simp

@[simp] lemma mul_pow [h : has_mul_symbol L] (t u : term L Œ≤) (k : ‚Ñï) : (t * u : term L Œ≤) ‚Üü k = t ‚Üü k * u ‚Üü k :=
by unfold has_mul.mul; simp

@[simp] lemma rew_var_inj_of_inj :
  ‚àÄ {Œ≤} {t u : term L Œ≤} {s : fin Œ≤ ‚Üí fin Œ≥} (I : function.injective s),
  t.rew_var s = u.rew_var s ‚Üî t = u
| Œ≤ #x               #y               s I := by { simp[rew_var], exact ‚ü®@I x y, congr_arg (Œª x, s x)‚ü© }
| Œ≤ #x               (term.app f v)   s I := by simp[rew_var]
| Œ≤ (term.app f v)   #x               s I := by simp[rew_var]
| Œ≤ (term.app f‚ÇÅ v‚ÇÅ) (term.app f‚ÇÇ v‚ÇÇ) s I :=
    begin
      simp[rew_var], rintros rfl rfl, simp, split,
      { intros h, funext j,
        have : (v‚ÇÅ j).rew_var s = (v‚ÇÇ j).rew_var s,
        { have := congr_fun h j, simp at this, exact this },
        exact (@rew_var_inj_of_inj Œ≤ (v‚ÇÅ j) (v‚ÇÇ j) s I).mp this },
      { rintros rfl, simp }
    end

@[simp] lemma pow_inj :
  ‚àÄ {Œ≤} {t u : term L Œ≤} {k : ‚Ñï}, t ‚Üü k = u ‚Üü k ‚Üî t = u
| Œ≤ #x               #y               k := by { simp, exact set_coe.ext_iff }
| Œ≤ #x               (term.app f v)   k := by simp
| Œ≤ (term.app f v)   #x               k := by simp
| Œ≤ (term.app f‚ÇÅ v‚ÇÅ) (term.app f‚ÇÇ v‚ÇÇ) k :=
    begin
      simp, rintros rfl, simp, intros, split,
      { intros h, funext i,
        have : (v‚ÇÅ i) ‚Üü k = (v‚ÇÇ i) ‚Üü k,
        { have := congr_fun h i, simp at this, exact this },
        exact (@pow_inj Œ≤ (v‚ÇÅ i) (v‚ÇÇ i) k).mp this },
      { rintros rfl, simp }
    end

@[simp] lemma finitary_pow_inj {n} {v w : finitary' (term L) n Œ≤} {i : ‚Ñï} : v ‚Üü i = w ‚Üü i ‚Üî v = w :=
‚ü®Œª h, funext (Œª i, by { have := congr_fun h i, simp at this, exact this }),
  by { rintros rfl, simp }‚ü©

lemma total_rew_inv :
  ‚àÄ {Œ≤ Œ≥} (s : finitary (term L Œ≥) Œ≤) (h : ‚àÄ n, ‚àÉ m, s m = #n), ‚àÄ (p : term L Œ≥) , ‚àÉ q : term L Œ≤, q.rew s = p
| Œ≤ Œ≥ s h (#x) := by rcases h x with ‚ü®q, h_q‚ü©; refine ‚ü®#q, _‚ü©; simp[h_q]
| Œ≤ Œ≥ s h (@app _ _ n f v) := by rcases classical.skolem.mp (Œª i, total_rew_inv s h (v i)) with ‚ü®w, w_eqn‚ü©;
    refine ‚ü®‚ù®f‚ù© w, by simp[w_eqn]‚ü©

@[simp] lemma rew_rew {Œ≤ Œ≥} {s‚ÇÄ s‚ÇÅ : finitary (term L Œ≥) Œ≤} (t : term L Œ≤) : s‚ÇÄ = s‚ÇÅ ‚Üí t.rew s‚ÇÄ = t.rew s‚ÇÅ :=
by { rintros rfl, refl }

@[simp] lemma concat_pow_eq (t : term L Œ≤) (s : finitary (term L Œ≥) (Œ≤ + 1)) :
  (‚§ât).rew s = t.rew s.tail := by simp[shift_eq, finitary.tail]

end term

def rewsf (s : finitary' (term L) Œ≤ Œ≥) : finitary (term L (Œ≥ + 1)) (Œ≤ + 1) := #0 ::·∂† ‚§âs

@[simp] lemma rewsf_Œπ : rewsf (@Œπ L Œ≤) = Œπ :=
by { simp[rewsf], ext ‚ü®i, h‚ü©, cases i; simp }

@[simp] def rewsf_itr (s : finitary (term L Œ≥) Œ≤) : Œ† k, finitary (term L (Œ≥ + k)) (Œ≤ + k)
| 0     := s
| (n+1) := rewsf (rewsf_itr n)

namespace formula

@[simp] def rew : Œ† {Œ≤ Œ≥}, (finitary (term L Œ≥) Œ≤) ‚Üí formula L Œ≤ ‚Üí formula L Œ≥
| Œ≤ Œ≥ s formula.verum         := ‚ä§
| Œ≤ Œ≥ s (app p v) := app p (Œª i, (v i).rew s)
| Œ≤ Œ≥ s (formula.equal t u)  := (t.rew s) ‚âÉ (u.rew s)
| Œ≤ Œ≥ s (formula.imply p q)  := p.rew s ‚ü∂ q.rew s
| Œ≤ Œ≥ s (formula.neg p)      := ‚Åª(p.rew s)
| Œ≤ Œ≥ s (formula.fal p)      := ùö∑ (rew (rewsf s) p)

@[reducible] def rew_var (s : fin Œ≤ ‚Üí fin Œ≥) : formula L Œ≤ ‚Üí formula L Œ≥ := Œª p, p.rew (Œª x, #(s x))

@[simp] lemma constant_rew (p : L.pr 0) (s : finitary (term L Œ≥) Œ≤) {v : finitary (term L Œ≤) 0} :
  (‚ù¥p‚ùµ v).rew s = ‚ù¥p‚ùµ finitary.nil := by simp

@[simp] lemma unary_rew (p : L.pr 1) (s : finitary (term L Œ≥) Œ≤) (v : finitary (term L Œ≤) 1) :
  (‚ù¥p‚ùµ v).rew s = ‚ù¥p‚ùµ ‚Äπ(v 0).rew s‚Ä∫ :=
by simp; ext; simp

@[simp] lemma binary_rew (p : L.pr 2) (s : finitary (term L Œ≥) Œ≤) (v : finitary (term L Œ≤) 2) :
  (‚ù¥p‚ùµ v).rew s = ‚ù¥p‚ùµ ‚Äπ(v 0).rew s, (v 1).rew s‚Ä∫ :=
by simp; ext; simp

@[simp] lemma le_rew [c : has_le_symbol L] (t u : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (t ‚âº u : formula L Œ≤).rew s = (t.rew s ‚âº u.rew s) :=
by unfold has_preceq.preceq; simp

@[simp] lemma mem_rew [c : has_mem_symbol L] (t u : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (t ‚àä u : formula L Œ≤).rew s = (t.rew s ‚àä u.rew s) :=
by unfold has_elem.elem; simp

@[simp] lemma equal_rew (t u : term L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (t ‚âÉ u : formula L Œ≤).rew s = (t.rew s ‚âÉ u.rew s) := rfl
@[simp] lemma verum_rew (s : finitary (term L Œ≥) Œ≤) :
  (‚ä§ : formula L Œ≤).rew s = ‚ä§ := rfl
@[simp] lemma neg_rew (p : formula L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (‚Åªp).rew s = ‚Åª(p.rew s) := rfl
@[simp] lemma imply_rew (p q : formula L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (p ‚ü∂ q).rew s = p.rew s ‚ü∂ q.rew s := rfl
@[simp] lemma fal_rew (p : formula L (Œ≤ + 1)) (s : finitary (term L Œ≥) Œ≤) :
  (ùö∑ p).rew s = ùö∑ (rew (rewsf s) p) := rfl
@[simp] lemma and_rew (p q : formula L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (p ‚äì q).rew s = p.rew s ‚äì q.rew s := rfl
@[simp] lemma or_rew (p q : formula L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (p ‚äî q).rew s = p.rew s ‚äî q.rew s := rfl
@[simp] lemma iff_rew (p q : formula L Œ≤) (s : finitary (term L Œ≥) Œ≤) :
  (p ‚ü∑ q).rew s = p.rew s ‚ü∑ q.rew s := rfl

@[simp] lemma nfal_rew (k : ‚Ñï) (p : formula L (Œ≤ + k)) (s : finitary' (term L) Œ≤ Œ≥) :
  (ùö∑[k] p).rew s = ùö∑[k] (p.rew (rewsf_itr s k)) :=
by { induction k with k IH generalizing s, { simp },
     simp[‚Üênat.add_one, IH] }

@[simp] lemma ex_rew (p : formula L (Œ≤ + 1)) (s : finitary (term L Œ≥) Œ≤) :
  (ùö∫ p).rew s = ùö∫ p.rew (rewsf s) :=by simp[has_exists_quantifier'.ex, formula.ex, rewsf]
@[simp] lemma bot_rew (s : finitary (term L Œ≥) Œ≤) : (‚ä• : formula L Œ≤).rew s = ‚ä• := by simp[has_bot.bot]

@[simp] lemma rew_Œπ (p : formula L Œ≤) : p.rew Œπ = p :=
by induction p; simp*

@[simp] lemma conjunction'_rew {n} (P : finitary (formula L Œ≤) n) (s : finitary (term L Œ≥) Œ≤) :
  (conjunction' n P).rew s = conjunction' n (Œª i, (P i).rew s) :=
by { induction n with n IH; simp* }

@[simp] lemma disjunction'_rew {n} (P : finitary (formula L Œ≤) n) (s : finitary (term L Œ≥) Œ≤) :
  (disjunction' n P).rew s = disjunction' n (Œª i, (P i).rew s) :=
by { induction n with n IH; simp* }

lemma nested_rew : ‚àÄ {Œ≤ Œ≥ Œ¥} (p : formula L Œ≤) (s‚ÇÄ : finitary (term L Œ≥) Œ≤) (s‚ÇÅ : finitary (term L Œ¥) Œ≥),
  (p.rew s‚ÇÄ).rew s‚ÇÅ = p.rew (Œª x, (s‚ÇÄ x).rew s‚ÇÅ)
| Œ≤ Œ≥ Œ¥ formula.verum         _ _ := by simp
| Œ≤ Œ≥ Œ¥ (‚ù¥p‚ùµ v) _ _ := by simp[rew]
| Œ≤ Œ≥ Œ¥ (formula.equal t u)  _ _ := by simp[rew]
| Œ≤ Œ≥ Œ¥ (formula.imply p q)   _ _ := by simp[rew, nested_rew p, nested_rew q]
| Œ≤ Œ≥ Œ¥ (formula.neg p)      _ _ := by simp[rew]; refine nested_rew p _ _
| Œ≤ Œ≥ Œ¥ (formula.fal p)     _ _ := by { simp[rew, nested_rew p], congr,
    ext ‚ü®n, h‚ü©, cases n; simp[rewsf, term.shift_eq] }

@[simp] def shift : Œ† {Œ≤}, formula L Œ≤ ‚Üí formula L (Œ≤ + 1) := Œª Œ≤ t, t.rew (Œª i, #i.succ)

instance : has_shift (formula L) := ‚ü®@shift L‚ü©

lemma shift_eq (p : formula L Œ≤) : ‚§âp = p.rew (Œª x, #x.succ) := rfl

lemma pow_eq (p : formula L Œ≤) (k) : p ‚Üü k = p.rew (Œª x, #(‚ü®x + k, by simp‚ü©)) :=
by { induction k with k IH; simp[*, shift_eq, nested_rew , ‚Üênat.add_one, add_assoc], refl }

lemma pow_eq_rew_var (p : formula L Œ≤) (k) : p ‚Üü k = p.rew_var (Œª x, ‚ü®x + k, by simp‚ü©) :=
by simp[pow_eq]

@[simp] lemma app_shift {n} (p : L.pr n) (v : finitary' (term L) n Œ≤) :
  ‚§â(app p v) = app p (‚§âv) := by simp[has_shift.shift, term.shift]

@[simp] lemma constant_pow (c : L.pr 0) (k : ‚Ñï) {v : finitary (term L Œ≤) 0} :
  (app c v) ‚Üü k = app c finitary.nil :=
by induction k; simp*

@[simp] lemma unary_pow (p : L.pr 1) (k : ‚Ñï) (t : term L Œ≤) : (‚ù¥p‚ùµ ‚Äπt‚Ä∫) ‚Üü k = ‚ù¥p‚ùµ ‚Äπt ‚Üü k‚Ä∫ :=
by induction k with k IH; simp*

@[simp] lemma binary_pow (p : L.pr 2) (k : ‚Ñï) (t‚ÇÅ t‚ÇÇ : term L Œ≤) :
  (‚ù¥p‚ùµ ‚Äπt‚ÇÅ, t‚ÇÇ‚Ä∫) ‚Üü k = ‚ù¥p‚ùµ ‚Äπt‚ÇÅ ‚Üü k, t‚ÇÇ ‚Üü k‚Ä∫ :=
by induction k with k IH; simp*

@[simp] lemma le_pow [c : has_le_symbol L] (t u : term L Œ≤) (k : ‚Ñï) :
  (t ‚âº u : formula L Œ≤) ‚Üü k = (t ‚Üü k ‚âº u ‚Üü k) :=
by unfold has_preceq.preceq; induction k with k IH; simp*

@[simp] lemma mem_pow [c : has_mem_symbol L] (t u : term L Œ≤) (k : ‚Ñï) :
  (t ‚àä u : formula L Œ≤) ‚Üü k = (t ‚Üü k ‚àä u ‚Üü k) :=
by unfold has_elem.elem; induction k with k IH; simp*

@[simp] lemma eq_pow (t u : term L Œ≤) (k : ‚Ñï) : (t ‚âÉ‚ÇÅ u) ‚Üü k = (t ‚Üü k ‚âÉ u ‚Üü k) := by simp[term.pow_eq, pow_eq]
@[simp] lemma imply_pow (p q : formula L Œ≤) (k : ‚Ñï) : (p ‚ü∂ q) ‚Üü k = p ‚Üü k ‚ü∂ q ‚Üü k := by simp[pow_eq]
@[simp] lemma neg_pow (p : formula L Œ≤) (k : ‚Ñï) : (‚Åªp) ‚Üü k = ‚Åª(p ‚Üü k) := by simp[pow_eq]
@[simp] lemma and_pow (p q : formula L Œ≤) (k : ‚Ñï) : (p ‚äì q) ‚Üü k = (p ‚Üü k) ‚äì (q ‚Üü k) := by simp[pow_eq]
@[simp] lemma or_pow (p q : formula L Œ≤) (k : ‚Ñï) : (p ‚äî q) ‚Üü k = (p ‚Üü k) ‚äî (q ‚Üü k) := by simp[pow_eq]
@[simp] lemma top_pow (k : ‚Ñï) : (‚ä§ : formula L Œ≤) ‚Üü k = ‚ä§ := by simp[pow_eq]
@[simp] lemma bot_pow (k : ‚Ñï) : (‚ä• : formula L Œ≤) ‚Üü k = ‚ä• := by simp[pow_eq]

lemma fal_shift_discard (p : formula L (Œ≤ + 1)) : ‚§â(ùö∑ p) = ùö∑ (p.rew (rewsf (Œª x, #x.succ))) :=
by simp[shift_eq]

lemma fal_pow (p : formula L (Œ≤ + 1)) (k : ‚Ñï) :
  (ùö∑ p) ‚Üü k = ùö∑ (p.rew (rewsf (Œª x, #(‚ü®x + k, by simp‚ü© : fin (Œ≤ + k))))) :=
by simp[pow_eq]

lemma ex_shift_discard (p : formula L (Œ≤ + 1)) : ‚§â(ùö∫ p) = ùö∫ (p.rew (rewsf (Œª x, #x.succ))) :=
by simp[shift_eq]

lemma ex_pow (p : formula L (Œ≤ + 1)) (k : ‚Ñï) :
  (ùö∫ p) ‚Üü k = ùö∫ (p.rew (rewsf (Œª x, #(‚ü®x + k, by simp‚ü© : fin (Œ≤ + k))))) :=
by simp[pow_eq]


lemma rew_rew (p : formula L Œ≤) {s‚ÇÄ s‚ÇÅ : finitary (term L Œ≥) Œ≤} : s‚ÇÄ = s‚ÇÅ ‚Üí p.rew s‚ÇÄ = p.rew s‚ÇÅ :=
by { rintros rfl, refl }

@[simp] lemma sentence_rew {p : formula L 0} (s : finitary (term L 0) 0) : p.rew s = p :=
by { suffices : p.rew s = p.rew Œπ, { simp at this, exact this }, refine rew_rew p (finitary.fin_0_ext _ _) }

@[simp] lemma concat_pow_eq (p : formula L Œ≤) (s : finitary (term L Œ≥) (Œ≤ + 1)) :
  (‚§âp).rew s = p.rew s.tail := by simp[shift_eq, finitary.tail, nested_rew]

lemma pow_rew_distrib  (p : formula L Œ≤) (s : finitary' (term L) Œ≤ Œ≥) (k : ‚Ñï) :
  (p.rew s) ‚Üü k = (p ‚Üü k).rew (rewsf_itr s k) :=
by { induction k with k IH generalizong s, { simp },
     { simp[‚Üênat.add_one, nested_rew, IH, shift_eq],
       refine rew_rew _ (funext (Œª i, _)), simp[rewsf, term.shift_eq] } }

lemma rewriting_sf_perm {s : finitary (term L Œ≥) Œ≤} (h : ‚àÄ n, ‚àÉ m, s m = #n) : ‚àÄ n, ‚àÉ m, (rewsf s) m = #n :=
Œª ‚ü®n, lt‚ü©, by { cases n, refine ‚ü®0, by simp[rewsf]‚ü©,
  simp[‚Üênat.add_one] at lt,
          rcases h ‚ü®n, lt‚ü© with ‚ü®m, e_m‚ü©, refine ‚ü®m+1, _‚ü©, simp[e_m, rewsf] }

lemma total_rew_inv :
  ‚àÄ {Œ≤} {Œ≥} (s : finitary (term L Œ≥) Œ≤) (h : ‚àÄ n, ‚àÉ m, s m = #n) (p : formula L Œ≥), ‚àÉ q : formula L Œ≤, q.rew s = p
| Œ≤ Œ≥ _ _ formula.verum := ‚ü®‚ä§, by simp‚ü©
| Œ≤ Œ≥ s h (@app _ _ n p v) :=
    by rcases classical.skolem.mp (Œª i : fin n, @term.total_rew_inv _ Œ≤ Œ≥ s h (v i : term L Œ≥)) with ‚ü®w, w_p‚ü©;
    refine ‚ü®‚ù¥p‚ùµ w, by simp[w_p]‚ü©
| Œ≤ Œ≥ s h (formula.equal t u)       := 
    by rcases term.total_rew_inv s h t with ‚ü®w‚ÇÅ, e_w‚ÇÅ‚ü©;
       rcases term.total_rew_inv s h u with ‚ü®w‚ÇÇ, e_w‚ÇÇ‚ü©; refine ‚ü®w‚ÇÅ ‚âÉ w‚ÇÇ, by simp[e_w‚ÇÅ, e_w‚ÇÇ]‚ü©
| Œ≤ Œ≥ s h (formula.imply p q)        := 
    by rcases total_rew_inv s h p with ‚ü®p', e_p'‚ü©;
       rcases total_rew_inv s h q with ‚ü®q', e_q'‚ü©; refine ‚ü®p' ‚ü∂ q', by simp*‚ü©
| Œ≤ Œ≥ s h (formula.neg p)           := by rcases total_rew_inv s h p with ‚ü®q, e_q‚ü©; refine ‚ü®‚Åªq, by simp*‚ü©
| Œ≤ Œ≥ s h (formula.fal p)          :=
  by rcases total_rew_inv _ (rewriting_sf_perm h) p with ‚ü®q, e_q‚ü©; refine ‚ü®ùö∑ q, by simp[e_q]‚ü©

@[simp] lemma rew_var_inj_of_inj :
  ‚àÄ {Œ≤} {Œ≥} {p q : formula L Œ≤} {s : fin Œ≤ ‚Üí fin Œ≥} (I : function.injective s),
  p.rew_var s = q.rew_var s ‚Üî p = q
| Œ≤ Œ≥ verum       p           s I := by {cases p; simp[rew_var], }
| Œ≤ Œ≥ (app p v)   verum       s I := by simp[rew_var]
| Œ≤ Œ≥ (app p‚ÇÅ v‚ÇÅ) (app p‚ÇÇ v‚ÇÇ) s I := by { simp[rew_var], rintros rfl rfl,
    simp, split,
    { intros h, funext i, refine (term.rew_var_inj_of_inj I).mp (congr_fun h i) },
    { rintros rfl, simp } }
| Œ≤ Œ≥ (app p v)   (equal t u) s I := by simp[rew_var]
| Œ≤ Œ≥ (app r v)   (imply p q) s I := by simp[rew_var]
| Œ≤ Œ≥ (app r v)   (neg p)     s I := by simp[rew_var]
| Œ≤ Œ≥ (app r v)   (fal p)     s I := by simp[rew_var, fal_pow]
| Œ≤ Œ≥ (equal t u) p           s I := by cases p; simp[rew_var, fal_pow, I]
| Œ≤ Œ≥ (imply p q) r           s I :=
    by cases r; simp[rew_var, fal_pow, @rew_var_inj_of_inj Œ≤ Œ≥ p _ s I, @rew_var_inj_of_inj Œ≤ Œ≥ q _ s I]
| Œ≤ Œ≥ (neg p)     q           s I :=
    by cases q; simp[rew_var, fal_pow, @rew_var_inj_of_inj Œ≤ Œ≥ p _ s I]
| Œ≤ Œ≥ (fal p)     verum                   s I := by simp[rew_var]
| Œ≤ Œ≥ (fal p)     (app r v)   s I := by simp[rew_var]
| Œ≤ Œ≥ (fal p)     (equal t u) s I := by simp[rew_var]
| Œ≤ Œ≥ (fal p)     (imply q r) s I := by simp[rew_var]
| Œ≤ Œ≥ (fal p)     (neg q)     s I := by simp[rew_var]
| Œ≤ Œ≥ (fal p)     (fal q)     s I := by { simp[rew_var, fal_pow], 
    have : ‚àÄ p : formula L (Œ≤ + 1),
      p.rew (rewsf (Œª (x : fin Œ≤), #(s x))) = p.rew_var (0 ::·∂† (Œª i, (s i).succ)),
    { intros p, simp[rewsf, nested_rew], congr, ext ‚ü®i, h‚ü©, cases i; simp },
    have I' : function.injective (0 ::·∂† (Œª i, (s i).succ)),
    { rintros ‚ü®x, x_lt‚ü© ‚ü®y, y_lt‚ü©, cases x with x; cases y with y; simp[fin.succ_ne_zero, Œª k, ne.symm (fin.succ_ne_zero k)],
      { intros h, exact fin.mk.inj_iff.mp (I (congr_arg s (I h)))} },
    simp[this, @rew_var_inj_of_inj _ _ p q _ I'] }
  
@[simp] lemma pow_inj : ‚àÄ {p q : formula L Œ≤} {i : ‚Ñï}, p ‚Üü i = q ‚Üü i ‚Üî p = q :=
Œª p q i, by { simp[pow_eq_rew_var], refine rew_var_inj_of_inj (Œª x y, by { simp, exact fin.ext }) }

@[simp] def is_open : Œ† {Œ≤}, formula L Œ≤ ‚Üí bool
| Œ≤ verum       := tt
| Œ≤ (‚ù¥p‚ùµ v)     := tt
| Œ≤ (equal t u) := tt
| Œ≤ (imply p q) := p.is_open && q.is_open
| Œ≤ (neg p)     := p.is_open
| Œ≤ (fal p)     := ff

@[simp] lemma is_open.verum : (‚ä§ : formula L Œ≤).is_open = tt := rfl

@[simp] lemma is_open.equal (t u : term L Œ≤) : (t ‚âÉ u : formula L Œ≤).is_open = tt := rfl

@[simp] lemma is_open.imply (p q : formula L Œ≤) : (p ‚ü∂ q : formula L Œ≤).is_open = p.is_open && q.is_open := rfl

@[simp] lemma is_open.neg (p : formula L Œ≤) : (‚Åªp : formula L Œ≤).is_open = p.is_open := rfl

@[simp] lemma is_open.fal (p : formula L (Œ≤ + 1)) : (ùö∑ p).is_open = ff := rfl

@[simp] lemma is_open.and (p q : formula L Œ≤) : (p ‚äì q).is_open = p.is_open && q.is_open := rfl

@[simp] lemma is_open.or (p q : formula L Œ≤) : (p ‚äî q).is_open = p.is_open && q.is_open := rfl

@[simp] def is_open_rew : ‚àÄ {Œ≤ Œ≥} {p : formula L Œ≤} {s : finitary (term L Œ≥) Œ≤}, (p.rew s).is_open ‚Üî p.is_open
| Œ≤ Œ≥ verum       s := by simp
| Œ≤ Œ≥ (‚ù¥p‚ùµ v)     s := by simp
| Œ≤ Œ≥ (equal t u) s := by simp
| Œ≤ Œ≥ (imply p q) s  := by simp[@is_open_rew Œ≤ Œ≥ p s, @is_open_rew Œ≤ Œ≥ q s]
| Œ≤ Œ≥ (neg p)     s := by simp[@is_open_rew Œ≤ Œ≥ p s]
| Œ≤ Œ≥ (fal p)     s   := by simp

@[simp] def is_open_pow : ‚àÄ {p : formula L Œ≤} {k : ‚Ñï}, (p ‚Üü k).is_open ‚Üî p.is_open :=
by simp[pow_eq]

end formula

namespace language

class predicate (L : language.{u}) :=
(fun_empty : ‚àÄ n, is_empty (L.fn n))

end language

end fopl
