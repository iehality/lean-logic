import deduction semantics

universes u t

namespace fopl
variables {L : language.{u}} (T : theory L) (i : ‚Ñï)

local infix ` ‚âÉ‚ÇÅ `:80 := ((‚âÉ) : term L ‚Üí term L ‚Üí formula L)

local prefix `‚àè‚ÇÅ `:64 := (has_univ_quantifier.univ : formula L ‚Üí formula L)

local prefix `‚àê‚ÇÅ `:64 := (has_exists_quantifier.ex : formula L ‚Üí formula L)

notation t` ‚âÉ[`:50 T :50`] `:0 u:50 := term.equiv T t u

@[symm] lemma term.equiv_refl (T : theory L) (t : term L) : t ‚âÉ[T] t := by simp[term.equiv]

@[symm] lemma term.equiv_symm (T : theory L) (t u : term L) : (t ‚âÉ[T] u) ‚Üí (u ‚âÉ[T] t) := provable.eq_symm

@[trans] lemma term.equiv_trans (T : theory L) (t u s : term L) : (t ‚âÉ[T] u) ‚Üí (u ‚âÉ[T] s) ‚Üí (t ‚âÉ[T] s) := provable.eq_trans

theorem term_equiv_equivalence (T : theory L) : equivalence (term.equiv T) :=
‚ü®@term.equiv_refl _ _, @term.equiv_symm _ _, @term.equiv_trans _ _‚ü©

@[reducible, simp, instance]
def herbrand (n : ‚Ñï) : setoid (term L) := ‚ü®Œª t‚ÇÅ t‚ÇÇ, T^n ‚ä¢ t‚ÇÅ ‚âÉ t‚ÇÇ, term_equiv_equivalence (T^n)‚ü©

def Herbrand (n : ‚Ñï) : Type u := quotient (herbrand T n)

def term.quo (T : theory L) (n : ‚Ñï) (t : term L) : Herbrand T n := quotient.mk' t

notation `‚ü¶`t`‚üß·¥¥` :max := term.quo _ _ t

instance (T : theory L) (n) : inhabited (Herbrand T n) := ‚ü®‚ü¶#0‚üß·¥¥‚ü©

local infix ` ‚âÉ‚ÇÅ `:80 := ((‚âÉ) : term L ‚Üí term L ‚Üí formula L)

namespace Herbrand
variables {T} {i}

@[elab_as_eliminator]
protected lemma ind_on {C : Herbrand T i ‚Üí Prop} (d : Herbrand T i)
  (h : ‚àÄ t : term L, C ‚ü¶t‚üß·¥¥) : C d :=
quotient.induction_on' d h

@[elab_as_eliminator, reducible]
protected def lift_on {œÜ} (d : Herbrand T i) (f : term L ‚Üí œÜ)
  (h : ‚àÄ t u : term L, T^i ‚ä¢ t ‚âÉ u ‚Üí f t = f u) : œÜ :=
quotient.lift_on' d f h

@[simp]
protected lemma lift_on_eq {œÜ} (t : term L) (f : term L ‚Üí œÜ)
  (h : ‚àÄ t u, T^i ‚ä¢ t ‚âÉ u ‚Üí f t = f u) : fopl.Herbrand.lift_on (‚ü¶t‚üß·¥¥ : Herbrand T i) f h = f t := rfl

@[elab_as_eliminator, reducible, simp]
protected def lift_on‚ÇÇ {œÜ} (d‚ÇÅ d‚ÇÇ : Herbrand T i) (f : term L ‚Üí term L ‚Üí œÜ)
  (h : ‚àÄ t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ, (T^i ‚ä¢ t‚ÇÅ ‚âÉ u‚ÇÅ) ‚Üí (T^i ‚ä¢ t‚ÇÇ ‚âÉ u‚ÇÇ) ‚Üí f t‚ÇÅ t‚ÇÇ = f u‚ÇÅ u‚ÇÇ) : œÜ :=
quotient.lift_on‚ÇÇ' d‚ÇÅ d‚ÇÇ f h

@[simp]
protected lemma lift_on‚ÇÇ_eq {œÜ} (t u : term L) (f : term L ‚Üí term L ‚Üí œÜ)
  (h : ‚àÄ t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ, (T^i ‚ä¢ t‚ÇÅ ‚âÉ u‚ÇÅ) ‚Üí (T^i ‚ä¢ t‚ÇÇ ‚âÉ u‚ÇÇ) ‚Üí f t‚ÇÅ t‚ÇÇ = f u‚ÇÅ u‚ÇÇ) :
  fopl.Herbrand.lift_on‚ÇÇ ‚ü¶t‚üß·¥¥ ‚ü¶u‚üß·¥¥ f h = f t u := rfl

protected def lift_on_finitary {œÜ} {n : ‚Ñï} (v : finitary (Herbrand T i) n) (f : finitary (term L) n ‚Üí œÜ)
  (h : ‚àÄ v‚ÇÅ v‚ÇÇ : finitary (term L) n, (‚àÄ n, T^i ‚ä¢ (v‚ÇÅ n) ‚âÉ (v‚ÇÇ n)) ‚Üí f v‚ÇÅ = f v‚ÇÇ) : œÜ :=
quotient.lift_on_finitary v f h 

@[simp]
protected lemma lift_on_finitary_eq {œÜ} {n} (v : finitary (term L) n) (f : finitary (term L) n ‚Üí œÜ)
  (h : ‚àÄ v‚ÇÅ v‚ÇÇ : finitary (term L) n, (‚àÄ n, T^i ‚ä¢ (v‚ÇÅ n) ‚âÉ (v‚ÇÇ n)) ‚Üí f v‚ÇÅ = f v‚ÇÇ) :
  fopl.Herbrand.lift_on_finitary (Œª x, (‚ü¶v x‚üß·¥¥ : Herbrand T i)) f h = f v :=
quotient.lift_on_finitary_eq v f h

@[simp]
protected lemma lift_on_finitary_0_eq {œÜ} (f : finitary (term L) 0 ‚Üí œÜ)
  (h : ‚àÄ v‚ÇÅ v‚ÇÇ : finitary (term L) 0, (‚àÄ n, T^i ‚ä¢ (v‚ÇÅ n) ‚âÉ (v‚ÇÇ n)) ‚Üí f v‚ÇÅ = f v‚ÇÇ)
  (n : finitary (Herbrand T i) 0) :
  fopl.Herbrand.lift_on_finitary n f h = f finitary.nil :=
quotient.lift_on_finitary_0_eq f h n

@[simp]
protected lemma lift_on_finitary_1_eq {œÜ} (t : term L) (f : finitary (term L) 1 ‚Üí œÜ)
  (h : ‚àÄ v‚ÇÅ v‚ÇÇ : finitary (term L) 1, (‚àÄ n, T^i ‚ä¢ (v‚ÇÅ n) ‚âÉ (v‚ÇÇ n)) ‚Üí f v‚ÇÅ = f v‚ÇÇ) :
  fopl.Herbrand.lift_on_finitary ‚Äπ‚ü¶t‚üß·¥¥‚Ä∫ f h = f ‚Äπt‚Ä∫ :=
quotient.lift_on_finitary_1_eq t f h

@[simp]
protected lemma lift_on_finitary_2_eq {œÜ} (t u : term L) (f : finitary (term L) 2 ‚Üí œÜ)
  (h : ‚àÄ v‚ÇÅ v‚ÇÇ : finitary (term L) 2, (‚àÄ n, T^i ‚ä¢ (v‚ÇÅ n) ‚âÉ (v‚ÇÇ n)) ‚Üí f v‚ÇÅ = f v‚ÇÇ) :
  fopl.Herbrand.lift_on_finitary ‚Äπ‚ü¶t‚üß·¥¥, ‚ü¶u‚üß·¥¥‚Ä∫ f h = f ‚Äπt, u‚Ä∫ :=
quotient.lift_on_finitary_2_eq t u f h

@[simp]
lemma of_eq_of {t u : term L} : (‚ü¶t‚üß·¥¥ : Herbrand T i) = ‚ü¶u‚üß·¥¥ ‚Üî (T^i ‚ä¢ t ‚âÉ u) :=
by simp[term.quo, term.equiv, quotient.eq']

def function {n} (f : L.fn n) : finitary (Herbrand T i) n ‚Üí Herbrand T i :=
Œª v, fopl.Herbrand.lift_on_finitary v (Œª u : finitary (term L) n, ‚ü¶term.app f u‚üß·¥¥) 
  $ Œª v‚ÇÅ v‚ÇÇ eqs, by simp[of_eq_of]; exact provable.equiv_function_of_equiv f eqs

notation `H‚ù®` c `‚ù©` v :84 := function c v

instance [has_zero_symbol L] : has_zero (Herbrand T i) := ‚ü®function has_zero_symbol.zero finitary.nil‚ü©

instance [has_succ_symbol L] : has_succ (Herbrand T i) := ‚ü®Œª h, function has_succ_symbol.succ ‚Äπh‚Ä∫‚ü©

@[simp] def Numeral [has_zero_symbol L] [has_succ_symbol L] : ‚Ñï ‚Üí Herbrand T i
| 0       := 0
| (n + 1) := Succ (Numeral n)

instance [has_add_symbol L] : has_add (Herbrand T i) := ‚ü®Œª h‚ÇÅ h‚ÇÇ, function has_add_symbol.add ‚Äπh‚ÇÅ, h‚ÇÇ‚Ä∫‚ü©

instance [has_mul_symbol L] : has_mul (Herbrand T i) := ‚ü®Œª h‚ÇÅ h‚ÇÇ, function has_mul_symbol.mul ‚Äπh‚ÇÅ, h‚ÇÇ‚Ä∫‚ü©


def symbol.pr {n} (p : L.pr n) : finitary (Herbrand T i) n ‚Üí Prop :=
Œª v, fopl.Herbrand.lift_on_finitary v (Œª u : finitary (term L) n, T^i ‚ä¢ formula.app p u) 
  $ Œª v‚ÇÅ v‚ÇÇ eqs, by simp[of_eq_of]; 
  exact ‚ü®Œª h, provable.predicate_of_equiv p h eqs, Œª h, provable.predicate_of_equiv p h (Œª i, provable.eq_symm (eqs i))‚ü©

def model (T : theory L) : model L := ‚ü®Herbrand T 0, ‚ü®‚ü¶#0‚üß·¥¥‚ü©, @function _ T 0, @symbol.pr _ T 0‚ü©

notation `ùîó[`T`]` := model T

protected theorem provable_iff {t‚ÇÅ t‚ÇÇ} : T^i ‚ä¢ t‚ÇÅ ‚âÉ t‚ÇÇ ‚Üî (‚ü¶t‚ÇÅ‚üß·¥¥ : Herbrand T i) = ‚ü¶t‚ÇÇ‚üß·¥¥ := by simp[of_eq_of]

protected theorem provable_iff0 {t‚ÇÅ t‚ÇÇ} : T ‚ä¢ t‚ÇÅ ‚âÉ t‚ÇÇ ‚Üî (‚ü¶t‚ÇÅ‚üß·¥¥ : Herbrand T 0) = ‚ü¶t‚ÇÇ‚üß·¥¥ := by simp[of_eq_of]

theorem constant_term (c : L.fn 0) (v : finitary (term L) 0):
  (‚ü¶‚ù®c‚ù© v‚üß·¥¥ : Herbrand T i) = function c finitary.nil := by simp[function, show v = finitary.nil, by ext; simp]

@[simp] theorem zero_eq_zero [has_zero_symbol L] :
  (‚ü¶(0 : term L)‚üß·¥¥ : Herbrand T i) = 0 := by unfold has_zero.zero; simp[function]

@[simp] theorem succ_eq_succ [has_succ_symbol L] (t : term L) :
  (‚ü¶Succ t‚üß·¥¥ : Herbrand T i) = Succ ‚ü¶t‚üß·¥¥ := by unfold has_succ.succ; simp[function]

@[simp] theorem numeral_eq_Numeral [has_zero_symbol L] [has_succ_symbol L] (n : ‚Ñï) :
  (‚ü¶(nÀô : term L)‚üß·¥¥ : Herbrand T i) = Numeral n :=
by induction n; simp[*,numeral]

@[simp] theorem add_eq_add [has_add_symbol L] (t u : term L) :
  (‚ü¶t + u‚üß·¥¥ : Herbrand T i) = ‚ü¶t‚üß·¥¥ + ‚ü¶u‚üß·¥¥ := by unfold has_add.add; simp[function]

@[simp] theorem mul_eq_mul [has_mul_symbol L] (t u : term L) :
  (‚ü¶t * u‚üß·¥¥ : Herbrand T i) = ‚ü¶t‚üß·¥¥ * ‚ü¶u‚üß·¥¥ := by unfold has_mul.mul; simp[function]

def pow : Herbrand T i ‚Üí Herbrand T (i+1) :=
Œª h, Herbrand.lift_on h (Œª u, ‚ü¶u^1‚üß·¥¥ : term L ‚Üí Herbrand T (i+1)) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { simp[Herbrand.of_eq_of, ‚Üêtheory.pow_add] at*,
  rw [show (t‚ÇÅ^1) ‚âÉ‚ÇÅ (t‚ÇÇ^1) = (t‚ÇÅ ‚âÉ t‚ÇÇ)^1, by simp, provable.sf_itr_sf_itr], exact hyp }

lemma sentence_pow {t : term L} (a : t.arity = 0) :
  (‚ü¶t‚üß·¥¥ : Herbrand T i).pow = ‚ü¶t‚üß·¥¥ := by simp[pow, Herbrand.of_eq_of, a]

@[simp] lemma constant_pow (c : L.fn 0) (f : finitary (Herbrand T i) 0) :
  (H‚ù®c‚ù© f : Herbrand T i).pow = (H‚ù®c‚ù© finitary.nil : Herbrand T (i + 1)) := sentence_pow (by simp)

@[simp] theorem zero_pow [has_zero_symbol L] :
  (0 : Herbrand T i).pow = 0 := by unfold has_zero.zero; simp

theorem succ_pow [has_succ_symbol L] (h : Herbrand T i) :
  (Succ h).pow = Succ h.pow :=
by { induction h using fopl.Herbrand.ind_on,
     simp[pow, ‚Üêsucc_eq_succ _, -succ_eq_succ] }

@[simp] theorem numeral_pow [has_zero_symbol L] [has_succ_symbol L] (n : ‚Ñï) :
  (Numeral n : Herbrand T i).pow = Numeral n :=
by induction n; simp[*,numeral, succ_pow]

theorem add_pow [has_add_symbol L] (h‚ÇÅ h‚ÇÇ : Herbrand T i) :
  (h‚ÇÅ + h‚ÇÇ).pow = h‚ÇÅ.pow + h‚ÇÇ.pow :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on with t,
     induction h‚ÇÇ using fopl.Herbrand.ind_on with u,
    simp[pow, ‚Üêadd_eq_add _ _, -add_eq_add] }

theorem mul_pow [has_mul_symbol L] (h‚ÇÅ h‚ÇÇ : Herbrand T i) :
  (h‚ÇÅ * h‚ÇÇ).pow = h‚ÇÅ.pow * h‚ÇÇ.pow :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on with t,
     induction h‚ÇÇ using fopl.Herbrand.ind_on with u,
    simp[pow, ‚Üêmul_eq_mul _ _, -mul_eq_mul] }

@[simp] def sf_simp (t : term L) (j : ‚Ñï) : (‚ü¶t‚üß·¥¥ : Herbrand T i).pow = ‚ü¶t^1‚üß·¥¥ := rfl

def var (n : ‚Ñï) : Herbrand T i := ‚ü¶#n‚üß·¥¥
prefix `‚ôØ`:max := var

@[simp] lemma var_pow (n : ‚Ñï) : (‚ôØn : Herbrand T i).pow= ‚ôØ(n + 1) := rfl

namespace proper

@[simp] def subst_sf_H_aux [proper : proper 0 T] (t : term L) :
  Herbrand T (i + 1) ‚Üí Herbrand T i :=
Œª h, Herbrand.lift_on h (Œª u, ‚ü¶u.rew Œπ[i ‚áù t]‚üß·¥¥ : term L ‚Üí Herbrand T i) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { simp[Herbrand.of_eq_of] at*, exact provable.pow_subst' i hyp t }

variables [proper 0 T]

def subst_sf_H : Herbrand T i ‚Üí Herbrand T (i+1) ‚Üí Herbrand T i :=
Œª t h, Herbrand.lift_on t (Œª t, subst_sf_H_aux t h : term L ‚Üí Herbrand T i) $
Œª t‚ÇÅ t‚ÇÇ hyp,
by { induction h using fopl.Herbrand.ind_on,
     simp[Herbrand.of_eq_of] at*, 
     refine provable.equal_rew_equal (Œπ[i ‚áù t‚ÇÅ]) (Œπ[i ‚áù t‚ÇÇ]) (Œª m, _) h,
     have C : m < i ‚à® m = i ‚à® i < m, from trichotomous m i,
     cases C,
     { simp[C] }, cases C; simp[C], exact hyp }

infix ` ‚ä≥·¥¥ ` :90  := subst_sf_H

@[simp] lemma subst_sf_H_sentence (h : Herbrand T i) {t : term L} (a : t.arity = 0) :
  h ‚ä≥·¥¥ (‚ü¶t‚üß·¥¥ : Herbrand T (i+1)) = ‚ü¶t‚üß·¥¥ :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of, a] }

@[simp] lemma subst_sf_H_var_eq (h : Herbrand T i) :
  h ‚ä≥·¥¥ ‚ôØi = h :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of, var] }

@[simp] lemma subst_sf_H_var_lt (h : Herbrand T i) (j : ‚Ñï) (eqn : j < i) :
  h ‚ä≥·¥¥ ‚ôØj = ‚ôØj :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of, var, eqn] }

@[simp] lemma subst_sf_H_var_gt (h : Herbrand T i) (j : ‚Ñï) (eqn : i < j) :
  h ‚ä≥·¥¥ ‚ôØj = ‚ôØ(j - 1) :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_H, Herbrand.of_eq_of, var, eqn] }

end proper

lemma var_eq (n : ‚Ñï) : (‚ü¶#n‚üß·¥¥ : Herbrand T i) = ‚ôØn := rfl

lemma subst_eq [proper 0 T] (t : term L) :
  (‚ü¶t.rew Œπ[i ‚áù t]‚üß·¥¥ : Herbrand T i) = ‚ü¶t‚üß·¥¥ ‚ä≥·¥¥ ‚ü¶t‚üß·¥¥ := rfl

lemma pow_eq (t : term L) :
  (‚ü¶t^1‚üß·¥¥ : Herbrand T (i + 1)) = pow ‚ü¶t‚üß·¥¥ := rfl

end Herbrand

lemma empty_has_model : ‚àÉ ùîÑ : model L, ùîÑ ‚äß‚Çú‚Çï (‚àÖ : theory L) :=
‚ü®ùîó[‚àÖ], Œª p h, by { exfalso, refine set.not_mem_empty p h }‚ü©

theorem empty_consistent : theory.consistent (‚àÖ : theory L) := @model_consistent L ùîó[‚àÖ] ‚àÖ
(Œª p h, by { exfalso, refine set.not_mem_empty p h })

@[reducible] def Lindenbaum : Type u := axiomatic_classical_logic.lindenbaum (T^i)

notation `‚ü¶`p`‚üß·¥∏` :max := @classical_logic.to_quo _ _ _ _ _ _ _ ((‚ä¢) _) _ p

namespace Lindenbaum
open provable Herbrand classical_logic axiomatic_classical_logic
variables {T} {i}

instance : boolean_algebra (Lindenbaum T i) := axiomatic_classical_logic.lindenbaum.boolean_algebra _

lemma top_def : (‚ä§ : Lindenbaum T i) = ‚ü¶‚ä§‚üß·¥∏ := rfl

lemma bot_def : (‚ä• : Lindenbaum T i) = ‚ü¶‚ä•‚üß·¥∏ := rfl

@[simp]
protected lemma of_eq_of {p q : formula L} : (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶q‚üß·¥∏ ‚Üî T^i ‚ä¢ p ‚ü∑ q :=
by simp[formula.equiv, quotient.eq']

def predicate {n} (p : L.pr n) : finitary (Herbrand T i) n ‚Üí Lindenbaum T i :=
Œª v, fopl.Herbrand.lift_on_finitary v (Œª u : finitary (term L) n, ‚ü¶formula.app p u‚üß·¥∏) 
  $ Œª v‚ÇÅ v‚ÇÇ eqs, by simp; exact equiv_predicate_of_equiv p eqs

notation `L‚ù¥` f `‚ùµ` := predicate f

instance [has_le_symbol L] : has_preceq (Herbrand T i) (Lindenbaum T i) := ‚ü®Œª h‚ÇÅ h‚ÇÇ, predicate has_le_symbol.le ‚Äπh‚ÇÅ, h‚ÇÇ‚Ä∫‚ü©

instance [has_mem_symbol L] : has_elem (Herbrand T i) (Lindenbaum T i) := ‚ü®Œª h‚ÇÅ h‚ÇÇ, predicate has_mem_symbol.mem ‚Äπh‚ÇÅ, h‚ÇÇ‚Ä∫‚ü©

@[simp] theorem predicate_app_1_iff {p : L.pr 1} {v : finitary (term L) 1} :
  (‚ü¶‚ù¥p‚ùµ v‚üß·¥∏ : Lindenbaum T i) = L‚ù¥p‚ùµ ‚Äπ‚ü¶v 0‚üß·¥¥‚Ä∫ := by simp[predicate, show ‚Äπv 0‚Ä∫ = v, by ext; simp]

@[simp] theorem predicate_app_2_iff {p : L.pr 2} {v : finitary (term L) 2} :
  (‚ü¶‚ù¥p‚ùµ v‚üß·¥∏ : Lindenbaum T i) = L‚ù¥p‚ùµ ‚Äπ‚ü¶v 0‚üß·¥¥, ‚ü¶v 1‚üß·¥¥‚Ä∫ := by simp[predicate, show ‚Äπv 0, v 1‚Ä∫ = v, by ext; simp]

@[simp] theorem le_iff_le [has_le_symbol L] (t u : term L) :
  (‚ü¶t ‚©Ω u‚üß·¥∏ : Lindenbaum T i) = ((‚ü¶t‚üß·¥¥ : Herbrand T i) ‚©Ω ‚ü¶u‚üß·¥¥) := by unfold has_preceq.preceq; simp

@[simp] theorem mem_iff_mem [has_mem_symbol L] (t u : term L) :
  (‚ü¶t ‚àä u‚üß·¥∏ : Lindenbaum T i) = ((‚ü¶t‚üß·¥¥ : Herbrand T i) ‚àä ‚ü¶u‚üß·¥¥) := by unfold has_elem.elem; simp

def equal : Herbrand T i ‚Üí Herbrand T i ‚Üí Lindenbaum T i :=
Œª h‚ÇÅ h‚ÇÇ, fopl.Herbrand.lift_on‚ÇÇ h‚ÇÅ h‚ÇÇ (Œª t‚ÇÅ t‚ÇÇ, (‚ü¶t‚ÇÅ ‚âÉ t‚ÇÇ‚üß·¥∏ : Lindenbaum T i)) $
Œª t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ eqn‚ÇÅ eqn‚ÇÇ, by simp; exact equiv_eq_of_equiv eqn‚ÇÅ eqn‚ÇÇ

instance : has_eq (Herbrand T i) (Lindenbaum T i) := ‚ü®equal‚ü©

local infix ` ‚âÉ·¥∏ `:80 := ((‚âÉ) : Herbrand T i ‚Üí Herbrand T i ‚Üí Lindenbaum T i)

lemma equal_def (t u : term L) : ‚ü¶t‚üß·¥¥ ‚âÉ·¥∏ ‚ü¶u‚üß·¥¥ = ‚ü¶t ‚âÉ u‚üß·¥∏ := rfl

def univ : Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, classical_logic.lindenbaum.lift_on p (Œª p, (‚ü¶‚àè p‚üß·¥∏ : Lindenbaum T i)) $
Œª p‚ÇÅ p‚ÇÇ hyp, by simp at hyp ‚ä¢; exact equiv_univ_of_equiv hyp

instance : has_univ_quantifier (Lindenbaum T (i + 1)) (Lindenbaum T i) := ‚ü®univ‚ü©

lemma univ_def (p : formula L) : (‚àè (‚ü¶p‚üß·¥∏ : Lindenbaum T (i + 1)) : Lindenbaum T i) = ‚ü¶‚àè p‚üß·¥∏ := rfl

def exist : Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, classical_logic.lindenbaum.lift_on p (Œª p, (‚ü¶‚àê p‚üß·¥∏ : Lindenbaum T i)) $
Œª p‚ÇÅ p‚ÇÇ hyp, by simp at hyp ‚ä¢; exact equiv_ex_of_equiv hyp

instance : has_exists_quantifier (Lindenbaum T (i + 1)) (Lindenbaum T i) := ‚ü®exist‚ü©

lemma exist_def (p : formula L) : (‚àê (‚ü¶p‚üß·¥∏ : Lindenbaum T (i + 1)) : Lindenbaum T i) = ‚ü¶‚àê p‚üß·¥∏ := rfl

@[simp] lemma equal_refl {h : Herbrand T i}  : h ‚âÉ·¥∏ h = ‚ä§ :=
by { induction h using fopl.Herbrand.ind_on;
     simp only [has_eq.eq, equal, top_def], simp[axiomatic_classical_logic'.iff_equiv], }

lemma equal_iff {h‚ÇÅ h‚ÇÇ : Herbrand T i} {p : L.pr 1} : h‚ÇÅ ‚âÉ·¥∏ h‚ÇÇ = ‚ä§ ‚Üî h‚ÇÅ = h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     simp only [has_eq.eq, equal, top_def], simp[axiomatic_classical_logic'.iff_equiv] }

def pow : Lindenbaum T i ‚Üí Lindenbaum T (i+1) :=
Œª p, lindenbaum.lift_on p (Œª p, (‚ü¶p^1‚üß·¥∏ : Lindenbaum T (i+1))) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp[contrapose, ‚Üêtheory.pow_add, -axiomatic_classical_logic'.iff_equiv] at*,
  exact sf_itr_sf_itr.mpr hyp }

lemma sentence_pow {p : formula L} (a : sentence p) :
  pow (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏ := by simp[pow, a]

@[simp] lemma pow_compl (l : Lindenbaum T i) : pow (l·∂ú) = (pow l)·∂ú :=
by { induction l using classical_logic.lindenbaum.ind_on, simp[pow, classical_logic.lindenbaum.neg_def] }

@[simp] lemma pow_sup (l m : Lindenbaum T i) : pow (l ‚äî m) = (pow l) ‚äî (pow m) :=
by { induction l using classical_logic.lindenbaum.ind_on, induction m using classical_logic.lindenbaum.ind_on,
     simp[pow, classical_logic.lindenbaum.sup_def] }

@[simp] lemma pow_inf (l m : Lindenbaum T i) : pow (l ‚äì m) = (pow l) ‚äì (pow m) :=
by { induction l using classical_logic.lindenbaum.ind_on, induction m using classical_logic.lindenbaum.ind_on,
     simp[pow, classical_logic.lindenbaum.inf_def] }

@[simp] lemma prod_top : (‚àè (‚ä§ : Lindenbaum T (i+1)) : Lindenbaum T i) = ‚ä§ :=
by { simp only [top_def, has_univ_quantifier.univ, univ], simp[axiomatic_classical_logic'.iff_equiv], apply provable.generalize, simp }

lemma prenex_ex_neg (l : Lindenbaum T (i+1)) : (‚àê l : Lindenbaum T i)·∂ú = ‚àè l·∂ú :=
by { induction l using classical_logic.lindenbaum.ind_on,
     simp[-axiomatic_classical_logic'.iff_equiv, formula.ex_eq, univ_def, exist_def, classical_logic.lindenbaum.neg_def] }

lemma prenex_fal_neg {l : Lindenbaum T (i+1)} : (‚àè l : Lindenbaum T i)·∂ú = ‚àê l·∂ú :=
by { have := prenex_ex_neg l·∂ú, simp[-prenex_ex_neg] at this, simp[‚Üêthis] }

lemma prenex_fal_or_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  (‚àè l) ‚äî k = ‚àè l ‚äî k.pow :=
begin
  induction l using classical_logic.lindenbaum.ind_on with p, induction k using classical_logic.lindenbaum.ind_on with q,
  simp[pow, axiomatic_classical_logic'.iff_equiv, univ_def, classical_logic.lindenbaum.sup_def], split,
  { refine (deduction.mp $ generalize $ contrapose.mp _), simp [‚Üêsf_dsb],
    have lmm‚ÇÅ : ‚§ä(T^i) +{ ‚Åª(‚àè p)^1 ‚ü∂ q^1 } ‚ä¢ ‚Åªq^1 ‚ü∂ (‚àè p)^1, { refine contrapose.mp _, simp },
    have lmm‚ÇÇ : ‚§ä(T^i) +{ ‚Åª(‚àè p)^1 ‚ü∂ q^1 } ‚ä¢ (‚àè p)^1 ‚ü∂ p,
    { suffices : ‚§ä(T^i) +{ ‚Åª(‚àè p)^1 ‚ü∂ q^1 } ‚ä¢ (‚àè p)^1 ‚ü∂ (p.rew $ (Œª x, #(x + 1))^1).rew Œπ[0 ‚áù #0],
      { simp[formula.nested_rew] at this, exact this },
      exact provable.q1 }, 
    exact impl_trans lmm‚ÇÅ lmm‚ÇÇ },
  { refine (deduction.mp $ contrapose.mp _), simp[‚Üêsf_dsb],
    refine deduction.mp (generalize _), simp[‚Üêsf_dsb],
    suffices : ‚§ä(T^i)+{(‚àè  (‚Åªp ‚ü∂ q^1))^1} ‚ä¢ ‚Åªq^1 ‚ü∂ p, { from deduction.mpr this },
    have :     ‚§ä(T^i)+{(‚àè  (‚Åªp ‚ü∂ q^1))^1} ‚ä¢ ‚Åªp ‚ü∂ q^1,
    { have : ‚§ä(T^i)+{(‚àè  (‚Åªp ‚ü∂ q^1))^1} ‚ä¢ (‚àè  (‚Åªp ‚ü∂ q^1))^1, { simp },
      have lmm‚ÇÅ := fal_subst this #0, simp at lmm‚ÇÅ,
      simp[formula.nested_rew] at lmm‚ÇÅ,
      exact lmm‚ÇÅ },
    refine contrapose.mp _, simp[this] }
end

lemma prenex_fal_or_right {l : Lindenbaum T i} {k : Lindenbaum T (i+1)} :
  l ‚äî ‚àè k = ‚àè (l.pow ‚äî k) :=
by simp[show l ‚äî (‚àè k) = (‚àè k) ‚äî l, from sup_comm, prenex_fal_or_left,
        show k ‚äî l.pow = l.pow ‚äî k, from sup_comm]

lemma prenex_fal_and_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  (‚àè l) ‚äì k = ‚àè l ‚äì k.pow :=
begin
  induction l using classical_logic.lindenbaum.ind_on, induction k using classical_logic.lindenbaum.ind_on,
  simp[pow, axiomatic_classical_logic'.iff_equiv, univ_def, classical_logic.lindenbaum.inf_def], split,
  { refine (deduction.mp $ generalize _), rw [‚Üêsf_dsb], simp[axiom_and],
    have : ‚§ä(T^i) +{ (‚àè  l)^1 } +{ k^1 } ‚ä¢ (‚àè l)^1, simp,
    have := fal_subst this #0, simp[formula.nested_rew] at this,
    exact this },
  { refine deduction.mp _, simp, split,
    { refine generalize _, simp[‚Üêsf_dsb],
      have : ‚§ä(T^i) +{ (‚àè l ‚äì (k^1))^1 } ‚ä¢ (‚àè l ‚äì (k^1))^1, simp,
      have := fal_subst this #0, simp[formula.nested_rew] at this, simp* at* },
    { have : (T^i) +{ ‚àè l ‚äì (k^1) } ‚ä¢ ‚àè l ‚äì (k^1), simp,
      have := fal_subst this #0, simp* at * } }
end

lemma prenex_ex_or_left {l : Lindenbaum T (i+1)} {k : Lindenbaum T i} :
  (‚àê l) ‚äî k = ‚àê (l ‚äî k.pow) :=
by rw ‚Üê compl_inj_iff; simp[-compl_inj_iff, prenex_ex_neg, prenex_fal_and_left]


namespace proper

variables [proper 0 T]

@[simp] def subst_sf_L_aux (t : term L) :
  Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª p, classical_logic.lindenbaum.lift_on p (Œª p, (‚ü¶p.rew (Œπ[i ‚áù t])‚üß·¥∏ : Lindenbaum T i)) $
Œª p‚ÇÅ p‚ÇÇ hyp, by { simp at*,
    exact provable.pow_subst' i hyp t }

def subst_sf_L : Herbrand T i ‚Üí Lindenbaum T (i+1) ‚Üí Lindenbaum T i :=
Œª t l, Herbrand.lift_on t (Œª t, subst_sf_L_aux t l) $
Œª t‚ÇÅ t‚ÇÇ hyp, by { induction l using classical_logic.lindenbaum.ind_on,
  simp at*,
  refine equal_rew_iff (Œª m, _) l,
  have C : m < i ‚à® m = i ‚à® i < m, from trichotomous _ _,
  cases C,
  { simp[C] }, cases C; simp[C],
  { refine hyp } }
infixr ` ‚ä≥ `:90  := subst_sf_L

lemma fal_le_subst (l : Lindenbaum T (i + 1)) (h : Herbrand T i) : ‚àè (‚ôØ0 ‚ä≥ l.pow) ‚â§ h ‚ä≥ l :=
begin
  induction l using classical_logic.lindenbaum.ind_on with p, 
  induction h using fopl.Herbrand.ind_on with t,
  simp[pow],
  have : T^i ‚ä¢ ‚àè (p^1).rew Œπ[(i + 1) ‚áù #0] ‚ü∂ ((p^1).rew Œπ[(i + 1) ‚áù #0]).rew Œπ[0 ‚áù t],
    from @specialize _ (T^i) ((p^1).rew Œπ[(i + 1) ‚áù #0]) t,
  have eqn : (((p^1).rew Œπ[(i + 1) ‚áù #0]).rew Œπ[0 ‚áù t]) = p.rew Œπ[i ‚áù t],
  { simp[formula.nested_rew, formula.pow_eq], congr,
    funext x, have C : i < x ‚à® i = x ‚à® x < i, exact trichotomous i x,
    cases C, { simp[C, pos_of_gt C] }, cases C;
    simp[C] },
  rw eqn at this,
  exact this
end

lemma fal_le_subst0 (l : Lindenbaum T 1) (h) : ‚àè l ‚â§ (h ‚ä≥ l) :=
begin
  induction l using classical_logic.lindenbaum.ind_on with p, 
  induction h using fopl.Herbrand.ind_on with t, 
  simp[subst_sf_L, univ_def, classical_logic.lindenbaum.le_def]
end


lemma subst_sf_L_le_ex (l : Lindenbaum T 1) (h) : h ‚ä≥ l ‚â§ ‚àê l :=
begin
  induction l using classical_logic.lindenbaum.ind_on, 
  induction h using fopl.Herbrand.ind_on, 
  simp[exist_def, subst_sf_L, formula.ex_eq, classical_logic.lindenbaum.le_def],
  refine contrapose.mp _, simp[formula.ex],
  rw (show ‚Åª(l.rew Œπ[0 ‚áù h]) = (‚Åªl).rew Œπ[0 ‚áù h], by simp), 
  exact specialize _ _
end

lemma le_fal_le_fal {l m : Lindenbaum T (i + 1)} :
  l ‚â§ m ‚Üí (‚àè l : Lindenbaum T i) ‚â§ ‚àè m :=
begin
  induction l using classical_logic.lindenbaum.ind_on, 
  induction m using classical_logic.lindenbaum.ind_on, 
  simp[subst_sf_L, pow, classical_logic.lindenbaum.le_def],
  { intros h, refine provable.q2.MP (GE h) },
end

@[simp] lemma dummy_fal (l : Lindenbaum T i) : ‚àè pow l = l :=
by { symmetry,
     induction l using classical_logic.lindenbaum.ind_on, 
     simp[pow, univ_def],
     exact @provable.dummy_fal_quantifir _ (T^i) l }

lemma pow_le_le_fal {l : Lindenbaum T i} {m : Lindenbaum T (i + 1)} :
  l.pow ‚â§ m ‚Üí l ‚â§ ‚àè m :=
by { have := @le_fal_le_fal _ _ _ _ l.pow m, simp at this, exact this }

@[simp] lemma subst_sf_L_compl (h : Herbrand T i) (l : Lindenbaum T (i+1)) :
  h ‚ä≥ (l·∂ú)= (h ‚ä≥ l)·∂ú :=
by { induction l using classical_logic.lindenbaum.ind_on, 
     induction h using fopl.Herbrand.ind_on,
     simp[subst_sf_L, Lindenbaum.of_eq_of, classical_logic.lindenbaum.neg_def] }

@[simp] lemma subst_sf_L_and (h : Herbrand T i) (l m : Lindenbaum T (i+1)) :
  h ‚ä≥ (l ‚äì m) = h ‚ä≥ l ‚äì h ‚ä≥ m :=
by { induction l using classical_logic.lindenbaum.ind_on, induction m using classical_logic.lindenbaum.ind_on, 
     induction h using fopl.Herbrand.ind_on,
     simp[subst_sf_L, classical_logic.lindenbaum.inf_def] }

@[simp] lemma subst_sf_L_or (h : Herbrand T i) (l m : Lindenbaum T (i+1)) :
  h ‚ä≥ (l ‚äî m) = h ‚ä≥ l ‚äî h ‚ä≥ m :=
by { induction l using classical_logic.lindenbaum.ind_on, induction m using classical_logic.lindenbaum.ind_on, 
     induction h using fopl.Herbrand.ind_on,
     simp[subst_sf_L, lindenbaum.sup_def] }

@[simp] lemma subst_sf_L_equal (h‚ÇÅ : Herbrand T i) (h‚ÇÇ h‚ÇÉ : Herbrand T (i+1)) :
  h‚ÇÅ ‚ä≥ (h‚ÇÇ ‚âÉ h‚ÇÉ) = ((h‚ÇÅ ‚ä≥·¥¥ h‚ÇÇ) ‚âÉ (h‚ÇÅ ‚ä≥·¥¥ h‚ÇÉ)) :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     induction h‚ÇÉ using fopl.Herbrand.ind_on,
     simp[subst_sf_L, Herbrand.proper.subst_sf_H, Herbrand.proper.subst_sf_H_aux, equal_def] }

@[simp] lemma subst_sf_L_fal (h : Herbrand T i) (l : Lindenbaum T (i+2)) :
  h ‚ä≥ ‚àè l = ‚àè (h.pow ‚ä≥ l) :=
by { induction l using classical_logic.lindenbaum.ind_on,
     induction h using fopl.Herbrand.ind_on,
     simp[subst_sf_L, Herbrand.pow, pow, subst_pow, univ_def] }

@[simp] lemma subst_sf_L_ex (h : Herbrand T i) (l : Lindenbaum T (i+2)) :
  h ‚ä≥ ‚àê l = ‚àê (h.pow ‚ä≥ l) :=
by { induction l using classical_logic.lindenbaum.ind_on,
     induction h using fopl.Herbrand.ind_on,
     simp[subst_sf_L, Herbrand.pow, pow, subst_pow, exist_def] }

lemma subst_sf_L_sentence (h : Herbrand T i) {p : formula L} (a : sentence p) :
  h ‚ä≥ (‚ü¶p‚üß·¥∏ : Lindenbaum T (i+1)) = ‚ü¶p‚üß·¥∏ :=
by { induction h using fopl.Herbrand.ind_on, simp[subst_sf_L, Lindenbaum.of_eq_of, a] }

lemma ex_subst_le (l : Lindenbaum T (i + 1)) (h : Herbrand T i) : h ‚ä≥ l ‚â§ ‚àê (‚ôØ0 ‚ä≥ l.pow) :=
begin
  suffices : (‚àê (‚ôØ0 ‚ä≥ pow l))·∂ú ‚â§ (h ‚ä≥ l)·∂ú,
  { exact compl_le_compl_iff_le.mp this },
  simp[prenex_ex_neg, -compl_le_compl_iff_le], 
  have := fal_le_subst l·∂ú h, simp at this, exact this
end

@[simp] lemma pow_fal1 (l : Lindenbaum T 1) : pow (‚àè l : Lindenbaum T 0) = ‚àè (‚ôØ0 ‚ä≥ pow (pow l)) :=
by { induction l using classical_logic.lindenbaum.ind_on, 
     simp[pow, subst_sf_L, var, formula.pow_eq, formula.nested_rew, rewriting_sf_itr.pow_eq', univ_def],
     have : (Œª x, ite (x = 0) #x #(x - 1 + 1 + 1) : ‚Ñï ‚Üí term L) = (Œª x, Œπ[(1 + 1) ‚áù #0] (x + 1 + 1)),
     { funext x, simp[slide', Œπ], cases x; simp[‚Üê nat.add_one] },
     simp [this] }

end proper

@[elab_as_eliminator]
protected lemma ind_on {C : Lindenbaum T i ‚Üí Prop} (d : Lindenbaum T i)
  (h : ‚àÄ p : formula L, C ‚ü¶p‚üß·¥∏) : C d :=
quotient.induction_on' d h

@[simp] lemma compl_sup_iff_le (l m : Lindenbaum T i) : l·∂ú ‚äî m = ‚ä§ ‚Üî l ‚â§ m :=
by { induction l using classical_logic.lindenbaum.ind_on,
     induction m using classical_logic.lindenbaum.ind_on,
     simp[top_def, show ‚Åªl ‚äî m = ‚Åª‚Åªl ‚ü∂ m, by refl, axiomatic_classical_logic'.iff_equiv,
          lindenbaum.neg_def, lindenbaum.sup_def, lindenbaum.le_def], }

@[simp] lemma fal_top_top : (‚àè (‚ä§ : Lindenbaum T (i + 1)) : Lindenbaum T i) = ‚ä§ :=
by { simp[top_def, axiomatic_classical_logic'.iff_equiv, univ_def], refine generalize (by simp) }

@[simp] lemma ex_top_top : (‚àê (‚ä§ : Lindenbaum T (i + 1)) : Lindenbaum T i) = ‚ä§ :=
by { simp[top_def, axiomatic_classical_logic'.iff_equiv, exist_def], refine provable.use #0 (by simp) }

theorem provable_top_iff {p} : T^i ‚ä¢ p ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ä§ := by simp[top_def, axiomatic_classical_logic'.iff_equiv]

theorem provable_top_iff0 {p} : T ‚ä¢ p ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T 0) = ‚ä§ := by simp[top_def, axiomatic_classical_logic'.iff_equiv]

protected theorem provable_iff {p q} : T^i ‚ä¢ p ‚ü∑ q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶q‚üß·¥∏ := by simp

protected theorem provable_iff0 {p q} : T ‚ä¢ p ‚ü∑ q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T 0) = ‚ü¶q‚üß·¥∏ := by simp

theorem provable_imp_iff {p q} : T^i ‚ä¢ p ‚ü∂ q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) ‚â§ ‚ü¶q‚üß·¥∏ := by refl

theorem provable_imp_iff0 {p q} : T ‚ä¢ p ‚ü∂ q ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T 0) ‚â§ ‚ü¶q‚üß·¥∏ := by refl

@[simp] lemma provable_top_eq : (‚ü¶‚ä§‚üß·¥∏ : Lindenbaum T i) = ‚ä§ := rfl

@[simp] lemma provable_bot_eq : (‚ü¶‚ä•‚üß·¥∏ : Lindenbaum T i) = ‚ä• := rfl

@[simp] theorem provable_and_eq {p q} : (‚ü¶p ‚äì q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏ ‚äì ‚ü¶q‚üß·¥∏ := rfl

@[simp] theorem provable_or_eq {p q} : (‚ü¶p ‚äî q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏ ‚äî ‚ü¶q‚üß·¥∏ := rfl

theorem provable_neg_eq {p} : (‚ü¶‚Åªp‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏·∂ú := rfl

@[simp] theorem provable_imp_eq {p q} : (‚ü¶p ‚ü∂ q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶p‚üß·¥∏·∂ú ‚äî ‚ü¶q‚üß·¥∏ := by {
  have : (‚ü¶p ‚ü∂ q‚üß·¥∏ : Lindenbaum T i) = ‚ü¶‚Åªp ‚äî q‚üß·¥∏, 
  { simp[-provable_or_eq, formula.or, axiomatic_classical_logic'.iff_equiv], simp only [has_sup.sup, formula.or],
    refine ‚ü®deduction.mp (by { simp }), deduction.mp _‚ü©,
    refine imply_of_equiv (show (T^i)+{‚Åª‚Åªp ‚ü∂ q} ‚ä¢ ‚Åª‚Åªp ‚ü∂ q, by simp[-dn1_iff]) _ _; simp },
  exact this }

lemma subst_eq [proper 0 T] (p : formula L) (t : term L) :
  (‚ü¶p.rew Œπ[i ‚áù t]‚üß·¥∏ : Lindenbaum T i) = ‚ü¶t‚üß·¥¥ ‚ä≥ ‚ü¶p‚üß·¥∏ := rfl

lemma pow_eq (p : formula L) :
  (‚ü¶p^1‚üß·¥∏ : Lindenbaum T (i + 1)) = pow ‚ü¶p‚üß·¥∏ := rfl
lemma provable_equal_eq {t‚ÇÅ t‚ÇÇ} : (‚ü¶t‚ÇÅ ‚âÉ t‚ÇÇ‚üß·¥∏ : Lindenbaum T i) = ‚ü¶t‚ÇÅ‚üß·¥¥ ‚âÉ·¥∏ ‚ü¶t‚ÇÇ‚üß·¥¥ := rfl

lemma equiv_eq_top_iff {p q} : (‚ü¶p ‚ü∑ q‚üß·¥∏ : Lindenbaum T i) = ‚ä§ ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ü¶q‚üß·¥∏ :=
by simp[provable_top_iff]

@[simp] theorem provable_fal_eq {p : formula L} : (‚ü¶‚àè p‚üß·¥∏ : Lindenbaum T i) = ‚àè (‚ü¶p‚üß·¥∏ : Lindenbaum T (i + 1)) := rfl

@[simp] theorem provable_ex_eq {p : formula L} : (‚ü¶‚àê p‚üß·¥∏ : Lindenbaum T i) = ‚àê (‚ü¶p‚üß·¥∏ : Lindenbaum T (i + 1)) := rfl

lemma to_Herbrand {h‚ÇÅ h‚ÇÇ : Herbrand T i} : h‚ÇÅ ‚âÉ·¥∏ h‚ÇÇ = ‚ä§ ‚Üî h‚ÇÅ = h‚ÇÇ :=
by { induction h‚ÇÅ using fopl.Herbrand.ind_on, induction h‚ÇÇ using fopl.Herbrand.ind_on,
     simp only [equal_def, top_def],
     simp[-provable_equal_eq, -provable_top_eq, axiomatic_classical_logic'.iff_equiv] }

theorem provable_neg_iff {p} : T^i ‚ä¢ ‚Åªp ‚Üî (‚ü¶p‚üß·¥∏ : Lindenbaum T i) = ‚ä• :=
by simp [provable_top_iff, ‚Üêlindenbaum.neg_def]

end Lindenbaum

lemma Lindenbaum.theory (C : theory L) (i : ‚Ñï) : set (Lindenbaum T i) := {l | ‚àÉ p, p ‚àà C ‚àß l = ‚ü¶p‚üß·¥∏}

end fopl