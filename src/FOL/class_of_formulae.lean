import FOL.completeness

universes u v

namespace fol
open_locale logic_symbol

variables {L : language}

namespace formula

def bfal_le [has_preceq (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚àè ((#0 ‚âº (t^1)) ‚ü∂ p)

notation `‚àè{‚âº ` t `} `:64 p := bfal_le t p

def bex_le [has_preceq (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚Åª‚àè{‚âº t}‚Åªp

notation `‚àê{‚âº ` t `} `:64 p := bex_le t p

def bfal_lt [has_prec (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚àè ((#0 ‚â∫ t^1) ‚ü∂ p)

notation `‚àè{‚â∫ ` t `} `:64 p := bfal_lt t p

def bex_lt [has_prec (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚Åª‚àè{‚â∫ t}‚Åªp

notation `‚àê{‚â∫ ` t `} `:64 p := bex_lt t p

def bfal_mem [has_elem (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚àè ((#0 ‚àä t^1) ‚ü∂ p)

notation `‚àè{‚àä ` t `} `:64 p := bfal_mem t p

def bex_mem [has_elem (term L) (formula L)] (t : term L) (p : formula L) : formula L :=
‚àê ((#0 ‚àä t^1) ‚äì p)

notation `‚àê{‚àä ` t `} `:64 p := bex_mem t p

@[simp] lemma bfal_le_rew [has_le_symbol L] (t : term L) (p : formula L) (s) :
  (‚àè{‚âº t} p).rew s = ‚àè{‚âº t.rew s} p.rew (s^1) :=
by simp[bfal_le, term.pow_rew_distrib]

@[simp] lemma bex_le_rew [has_le_symbol L] (t : term L) (p : formula L) (s) :
  (‚àê{‚âº t} p).rew s = ‚àê{‚âº t.rew s} p.rew (s^1) :=
by simp[bex_le, term.pow_rew_distrib]

@[simp] def fal_rank : formula L ‚Üí ‚Ñï
| (p ‚ü∂ q) := max (fal_rank p) (fal_rank q)
| (‚Åªp)     := fal_rank p
| (‚àè p)  := fal_rank p + 1
| _        := 0

@[simp] lemma fal_rank_and (p q : formula L) :
  fal_rank (p ‚äì q) = max (fal_rank p) (fal_rank q) := rfl

@[simp] lemma fal_rank_or (p q : formula L) :
  fal_rank (p ‚äî q) = max (fal_rank p) (fal_rank q) := rfl

@[simp] lemma fal_rank_ex (p : formula L) :
  fal_rank (‚àê p) = fal_rank p + 1 := rfl

@[simp] lemma fal_rank_eq (t u : term L) :
  fal_rank (t ‚âÉ u : formula L) = 0 := rfl

@[simp] lemma fal_rank_le [has_le_symbol L] (t u : term L) :
  fal_rank (t ‚âº u : formula L) = 0 := rfl

@[simp] lemma fal_rank_mem [has_mem_symbol L] (t u : term L) :
  fal_rank (t ‚àä u : formula L) = 0 := rfl

@[simp] def binary_inv : formula L ‚Üí option (formula L √ó formula L)
| (p ‚ü∂ q) := some (p, q)
| _        := none

@[simp] def unary_inv : formula L ‚Üí option (formula L)
| ‚Åªp := some p
| ‚àè p := some p
| _  := none

@[simp] def quantifier_fn_aux : ‚Ñï ‚Üí (term L ‚Üí formula L) ‚Üí formula L ‚Üí formula L
| s f ‚ä§        := ‚ä§
| s f (p ‚ü∂ q) := quantifier_fn_aux s (Œª t, (f t).binary_inv.iget.1) p ‚ü∂ quantifier_fn_aux s (Œª t, (f t).binary_inv.iget.2) q
| s f ‚Åªp       := ‚Åªquantifier_fn_aux s (Œª t, (f t).unary_inv.iget) p
| s f (‚àè p)  := ‚àè quantifier_fn_aux (s + 1) (Œª t, (f t).unary_inv.iget) p
| s f _        := f #s

@[simp] lemma quantifier_fn_aux_imply (s) (f g : term L ‚Üí formula L) (p q : formula L) :
  quantifier_fn_aux s (Œª x, f x ‚ü∂ g x) (p ‚ü∂ q) = quantifier_fn_aux s f p ‚ü∂ quantifier_fn_aux s g q := rfl

@[simp] lemma quantifier_fn_aux_neg (s) (f : term L ‚Üí formula L) (p : formula L) :
  quantifier_fn_aux s (Œª x, ‚Åªf x) (‚Åªp) = ‚Åªquantifier_fn_aux s f p := rfl

@[simp] lemma quantifier_fn_aux_fal (s) (f : term L ‚Üí formula L) (p : formula L) :
  quantifier_fn_aux s (Œª x, ‚àè (f x)) (‚àè p) = ‚àè quantifier_fn_aux (s + 1) f p := rfl

@[simp] lemma quantifier_fn_aux_and (s) (f g : term L ‚Üí formula L) (p q : formula L) :
  quantifier_fn_aux s (Œª x, f x ‚äì g x) (p ‚äì q) = quantifier_fn_aux s f p ‚äì quantifier_fn_aux s g q := rfl

@[simp] lemma quantifier_fn_aux_or (s) (f g : term L ‚Üí formula L) (p q : formula L) :
  quantifier_fn_aux s (Œª x, f x ‚äî g x) (p ‚äî q) = quantifier_fn_aux s f p ‚äî quantifier_fn_aux s g q := rfl

@[simp] lemma quantifier_fn_aux_iff (s) (f g : term L ‚Üí formula L) (p q : formula L) :
  quantifier_fn_aux s (Œª x, f x ‚ü∑ g x) (p ‚ü∑ q) = quantifier_fn_aux s f p ‚ü∑ quantifier_fn_aux s g q :=
by simp[lrarrow_def]

@[simp] lemma quantifier_fn_aux_ex (s) (f : term L ‚Üí formula L) (p : formula L) :
  quantifier_fn_aux s (Œª x, ‚àê (f x)) (‚àê p) = ‚àê quantifier_fn_aux (s + 1) f p := rfl

@[simp] lemma quantifier_fn_aux_eq (s) (f g : term L ‚Üí term L) (t u : term L) :
  quantifier_fn_aux s (Œª x, f x ‚âÉ g x) (t ‚âÉ u) = (f #s ‚âÉ g #s) := rfl

@[simp] lemma quantifier_fn_aux_le [has_le_symbol L] (s) (f g : term L ‚Üí term L) (t u : term L) :
  quantifier_fn_aux s (Œª x, f x ‚âº g x) (t ‚âº u) = (f #s ‚âº g #s) := rfl

@[simp] lemma quantifier_fn_aux_mem [has_mem_symbol L] (s) (f g : term L ‚Üí term L) (t u : term L) :
  quantifier_fn_aux s (Œª x, f x ‚àä g x) (t ‚àä u) = (f #s ‚àä g #s) := rfl

@[simp] lemma fal_fn_constant (s) (p : formula L) :
  quantifier_fn_aux s (Œª x, p) p = p :=
by induction p generalizing s; simp*

end formula

def fal_fn (p : term L ‚Üí formula L) : formula L := ‚àè formula.quantifier_fn_aux 0 p (p #0)

def ex_fn (p : term L ‚Üí formula L) : formula L := ‚àê formula.quantifier_fn_aux 0 p (p #0)

notation `‚àÄ‚ÇÅ` binders `, ` r:(scoped p, fal_fn p) := r

notation `‚àÉ‚ÇÅ` binders `, ` r:(scoped p, ex_fn p) := r

def bfal_le_fn [has_preceq (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÄ‚ÇÅ x, ((x ‚âº t) ‚ü∂ p x)

notation `‚àÄ‚ÇÅ` binders ` ‚âº·µá ` t `, ` r:(scoped p, bfal_le_fn t p) := r

def bex_le_fn [has_preceq (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÉ‚ÇÅ x, ((x ‚âº t) ‚äì p x)

notation `‚àÉ‚ÇÅ` binders ` ‚âº·µá ` t `, ` r:(scoped p, bex_le_fn t p) := r

def bfal_lt_fn [has_prec (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÄ‚ÇÅ x, ((x ‚â∫ t) ‚ü∂ p x)

notation `‚àÄ‚ÇÅ` binders ` ‚â∫·µá ` t `, ` r:(scoped p, bfal_le_fn t p) := r

def bex_lt_fn [has_prec (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÉ‚ÇÅ x, ((x ‚â∫ t) ‚äì p x)

notation `‚àÉ‚ÇÅ` binders ` ‚â∫·µá ` t `, ` r:(scoped p, bex_le_fn t p) := r

def bfal_mem_fn [has_elem (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÄ‚ÇÅ x, (x ‚àä t) ‚ü∂ p x

notation `‚àÄ‚ÇÅ` binders ` ‚àä·µá ` t `, ` r:(scoped p, bfal_mem_fn t p) := r

def bex_mem_fn [has_elem (term L) (formula L)] (t : term L) (p : term L ‚Üí formula L) : formula L :=
‚àÉ‚ÇÅ x, (x ‚àä t) ‚äì p x

notation `‚àÉ‚ÇÅ` binders ` ‚àä·µá ` t `, ` r:(scoped p, bex_mem_fn t p) := r

#check ‚àÄ‚ÇÅ x ‚â∫·µá #4, x ‚âÉ x

#check ‚àê{‚âº #3} #4 ‚âÉ #9

variables [has_le_symbol L]

namespace formula

section
variables {L‚ÇÅ L‚ÇÇ : language.{u}} [L‚ÇÅ.language_translation_coe L‚ÇÇ]

end

inductive bounded : theory L
| verum : bounded ‚ä§
| predicate {n} {p : L.pr n} {v} : bounded (‚ù¥p‚ùµ v)
| equal {t u : term L} : bounded (t ‚âÉ u)
| imply {p q} : bounded p ‚Üí bounded q ‚Üí bounded (p ‚ü∂ q)
| neg {p} : bounded p ‚Üí bounded (‚Åªp)
| bfal {t} {p} : bounded p ‚Üí bounded ‚àè{‚âº t} p

attribute [simp] bounded.verum bounded.predicate bounded.equal bounded.neg

@[simp] lemma bounded_preceq (t u : term L) : bounded (t ‚âº u : formula L) :=
bounded.predicate

@[simp] lemma bounded_imply_iff (p q : formula L) : bounded (p ‚ü∂ q) ‚Üî bounded p ‚àß bounded q :=
‚ü®Œª h, by { cases h, simp* }, Œª ‚ü®hp, hq‚ü©, bounded.imply hp hq‚ü©

@[simp] lemma bounded_neg_iff (p : formula L) : bounded (‚Åªp) ‚Üî bounded p :=
‚ü®Œª h, by { cases h, simp* }, bounded.neg‚ü©

lemma bounded_of_open {p : formula L} (h : p.is_open) : bounded p :=
begin
  induction p,
  case verum { simp },
  case app { simp },
  case equal { simp },
  case imply : p q IHp IHq { simp at h, exact bounded.imply (IHp h.1) (IHq h.2) },
  case neg : p IH { simp at h, exact bounded.neg (IH h) },
  case fal { simp at h, contradiction }
end

lemma bounded_of_lt {p q : formula L} (hq : bounded q) (h : p < q) : bounded p :=
begin
  induction q; try { simp at h, contradiction },
  case imply : q‚ÇÅ q‚ÇÇ IH‚ÇÅ IH‚ÇÇ
  { simp at h hq, rcases h with (le | le),
    { rcases lt_or_eq_of_le le with (lt | rfl), { exact IH‚ÇÅ hq.1 lt }, { exact hq.1 } },
    { rcases lt_or_eq_of_le le with (lt | rfl), { exact IH‚ÇÇ hq.2 lt }, { exact hq.2 } } },
  case neg : q IH
  { simp at h hq, rcases lt_or_eq_of_le h with (lt | rfl), { refine IH hq lt }, { exact hq } },
  case fal : p IH
  { rcases hq with ‚ü®lo, loo‚ü©, simp at h,
    rcases lt_or_eq_of_le h with (lt | rfl), { refine IH (by { simp, exact hq_·æ∞}) lt }, { simp, exact hq_·æ∞ } }
end

@[simp] lemma bounded_bfal_iff {p : formula L} {t : term L} : bounded (‚àè{‚âº t} p) ‚Üî bounded p :=
‚ü®Œª h, bounded_of_lt h (by { simp[bfal_le], refine le_of_lt (by simp) }), bounded.bfal‚ü©

lemma bounded_bex_iff {p : formula L} {t : term L} : bounded (‚àê{‚âº t} p) ‚Üî bounded p :=
by simp[bex_le]

lemma bounded_rew (s : ‚Ñï ‚Üí term L) (p : formula L) (h : bounded p) : bounded (rew s p) :=
by induction h generalizing s; simp*

instance bounded_proper : proper_theory (bounded : theory L) :=
‚ü®Œª p s mem, by { simp[set.mem_def] at mem ‚ä¢, induction mem generalizing s; try {simp*} }‚ü©

mutual inductive is_sigma, is_pi
with is_sigma : ‚Ñï ‚Üí formula L ‚Üí Prop
| zero : ‚àÄ {p : formula L}, p.bounded ‚Üí is_sigma 0 p
| succ : ‚àÄ {p} {n}, is_pi n p ‚Üí is_sigma (n+1) ‚àê p 
with is_pi : ‚Ñï ‚Üí formula L ‚Üí Prop
| zero : ‚àÄ {p : formula L}, p.bounded ‚Üí is_pi 0 p
| succ : ‚àÄ {p} {n}, is_sigma n p ‚Üí is_pi (n+1) ‚àè p

notation `ùõ¥‚ÇÄ` := is_sigma 0

notation `ùõ¥‚ÇÅ` := is_sigma 1

notation `ùõ±‚ÇÄ` := is_pi 0

notation `ùõ±‚ÇÅ` := is_pi 1

@[simp] lemma sigma_0_iff_bounded : (ùõ¥‚ÇÄ : theory L) = bounded :=
by funext p; simp; exact ‚ü®Œª h, by { cases h, simp* }, is_sigma.zero‚ü©

@[simp] lemma pi_0_iff_bounded : (ùõ±‚ÇÄ : theory L) = bounded :=
by funext p; simp; exact ‚ü®Œª h, by { cases h, simp* }, is_pi.zero‚ü©

private lemma sigma_pi_proper (n : ‚Ñï) : proper_at 0 (is_sigma n : theory L) ‚àß proper_at 0 (is_pi n : theory L) :=
begin
  induction n with n IH,
  { simp, refine proper_theory.proper },
  { refine ‚ü®Œª p s hs, _, Œª p s hp, _‚ü©,
    { cases hs with _ _ p _ hp, simp,
      have : is_pi n (p.rew (s^1)),
      { have := IH.2 p (s^1) hp, simp at this, exact this },
      refine is_sigma.succ this },
    { cases hp with _ _ p _ hs, simp,
      have : is_sigma n (p.rew (s^1)),
      { have := IH.1 p (s^1) hs, simp at this, exact this },
      refine is_pi.succ this } }
end

instance is_sigma_proper (n) : proper_theory (is_sigma n : theory L) := ‚ü®(sigma_pi_proper n).1‚ü©

instance is_pi_proper (n) : proper_theory (is_pi n : theory L) := ‚ü®(sigma_pi_proper n).2‚ü©

end formula

def arithmetical_sigma (T : theory L) (n : ‚Ñï) : theory L :=
Œª p, ‚àÉ q, T ‚ä¢ p ‚ü∑ q ‚àß q.is_sigma n

notation `ùúÆ`:60 n ` in ` T :60 := arithmetical_sigma T n

def arithmetical_pi (T : theory L) (n : ‚Ñï) : theory L :=
Œª p, ‚àÉ q, T ‚ä¢ p ‚ü∑ q ‚àß q.is_pi n

notation `ùú´`:60 n ` in ` T :60 := arithmetical_pi T n

def arithmetical_delta (T : theory L) (n : ‚Ñï) : theory L :=
Œª p, p ‚àà ùúÆn in T ‚àß p ‚àà ùú´n in T

notation `ùúü`:60 n ` in ` T :60 := arithmetical_delta T n



end fol