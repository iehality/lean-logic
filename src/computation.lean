import 
  computability.primrec
  computability.partrec
  computability.partrec_code
  computability.halting
  data.pfun
  deduction semantics lindenbaum arithmetic

open encodable denumerable part classical_logic axiomatic_classical_logic axiomatic_classical_logic'

namespace nat.primrec
open vector

#check @nat.rec

inductive pcode : ‚Ñï ‚Üí Type
| zero : pcode 0
| succ : pcode 1
| nth {n} (i : fin n) : pcode n
| comp {m n} : pcode n ‚Üí (fin n ‚Üí pcode m) ‚Üí pcode m
| prec {n} : pcode n ‚Üí pcode (n + 2) ‚Üí pcode (n + 1)

namespace pcode

def eval : ‚àÄ {n}, pcode n ‚Üí finitary ‚Ñï n ‚Üí ‚Ñï
| _ zero            := Œª _, 0
| _ succ            := Œª v, nat.succ v.head
| _ (nth i)         := Œª v, v i
| _ (comp cf cg)    := Œª a, eval cf (Œª i, eval (cg i) a)
| _ (@prec n cf cg) := Œª v : finitary ‚Ñï (n+1),
    v.head.elim (eval cf v.tail) (Œª y IH, eval cg (v.tail ::·∂† IH ::·∂† y))

theorem exists_pcode {n f} : @nat.primrec' n f ‚Üî ‚àÉ c : pcode n, (Œª v : vector ‚Ñï n, eval c v.nth) = f := ‚ü®Œª h,
begin
  induction h,
  case zero { exact ‚ü®zero, rfl‚ü© },
  case succ { exact ‚ü®succ, by { funext x, simp[eval],  }‚ü© },
  case nth  : n i { exact ‚ü®nth i, rfl‚ü© },
  case comp : ar_gs ar_f f gs pf pgs IH_f IH_gs {
    rcases IH_f with ‚ü®cf, rfl‚ü©,
    rcases classical.skolem.mp IH_gs with ‚ü®cgs, cgs_eqn‚ü©,
    refine ‚ü®comp cf cgs, _‚ü©, simp[eval, cgs_eqn] },
  case prec : n f g pf pg hf hg {
    rcases hf with ‚ü®cf, rfl‚ü©, rcases hg with ‚ü®cg, rfl‚ü©,
    exact ‚ü®prec cf cg, rfl‚ü© }
end, Œª h,
begin
  rcases h with ‚ü®c, rfl‚ü©, induction c,
  case pcode.zero { exact nat.primrec'.zero },
  case pcode.succ { exact nat.primrec'.succ },
  case pcode.nth : n i { exact nat.primrec'.nth _ },
  case pcode.comp : _ _ cf cgs pf pgs { refine nat.primrec'.comp _ pf pgs },
  case pcode.prec : _ cf cg pf pg { exact nat.primrec'.prec pf pg },
end‚ü©

end pcode

end nat.primrec

namespace fopl

namespace arithmetic

namespace LC

inductive langf : ‚Ñï ‚Üí Type
| fn‚ÇÅ {n} : nat.primrec.pcode n ‚Üí langf n

notation `*fn ` n := langf.fn‚ÇÅ n

inductive langp : ‚Ñï ‚Üí Type

end LC

def LC : language := ‚ü®LC.langf, LC.langp‚ü©

local infix ` ‚âÉ‚ÇÅ `:80 := ((‚âÉ) : term (LA + LC) ‚Üí term (LA + LC) ‚Üí formula (LA + LC))
local prefix `‚àè‚ÇÅ `:64 := (has_univ_quantifier.univ : formula (LA + LC) ‚Üí formula (LA + LC))
local prefix `‚àê‚ÇÅ `:64 := (has_exists_quantifier.ex : formula (LA + LC) ‚Üí formula (LA + LC))

namespace prec
open nat.primrec vector

@[reducible] def symbol.fn‚ÇÅ {n} (c : nat.primrec.pcode n) : finitary (term (LA + LC)) n ‚Üí term (LA + LC) :=
Œª x, term.app (sum.inr (*fn c)) x

prefix `FÃá `:max := symbol.fn‚ÇÅ

inductive Prim : theory (LA + LC)
| zero   : Prim (FÃá pcode.zero ‚àÖ ‚âÉ ZÃá)
| succ   : Prim ‚àè (FÃá pcode.succ fin[#0] ‚âÉ‚ÇÅ SÃá #0)
| nth {n} (i : fin n) : Prim ‚àè[n] (FÃá (pcode.nth i) (Œª j, #j) ‚âÉ #i)
| comp {m n} : ‚àÄ (c : pcode n) (cs : fin n ‚Üí pcode m),
    Prim ‚àè[m] (FÃá (pcode.comp c cs) (Œª j, #j) ‚âÉ FÃá c (Œª i, FÃá (cs i) (Œª j, #j)))
| prec_z {n} : ‚àÄ (c‚ÇÄ : pcode n) (c‚ÇÅ : pcode (n + 2)),
    Prim ‚àè[n] (FÃá (pcode.prec c‚ÇÄ c‚ÇÅ) (ZÃá ·∂†:: (Œª j, #j)) ‚âÉ FÃá c‚ÇÄ (Œª j, #j))
| prec_s {n} : ‚àÄ (c‚ÇÄ : pcode n) (c‚ÇÅ : pcode (n + 2)),
    Prim ‚àè[n+1] (FÃá (pcode.prec c‚ÇÄ c‚ÇÅ) (SÃá #0 ·∂†:: (Œª i, #(i + 1))) ‚âÉ
    FÃá c‚ÇÅ (#0 ·∂†:: FÃá (pcode.prec c‚ÇÄ c‚ÇÅ) (Œª j, #j) ·∂†:: (Œª j, #j)))

theorem complete' (T : theory LA) [extend ùêê T] {i} (f : vector ‚Ñï i ‚Üí ‚Ñï) (h : nat.primrec' f) :
‚àÉ c : pcode i, ‚àÄ n : vector ‚Ñï i, Prim ‚ä¢ FÃá c (Œª i, numeral (n.nth i)) ‚âÉ (numeral (f n)) :=
begin
  induction h,
  case nat.primrec'.zero { simp[pcode.eval], refine ‚ü®pcode.zero, _‚ü©,
    rintros n,
    simp[show (Œª (i : fin 0), ‚Üë(numeral (n.nth i))) = (‚àÖ : finitary (term (LA + LC)) 0), by simp,
         show numeral 0 = ZÃá, by refl],
    refine by_axiom Prim.zero },
  case nat.primrec'.succ { sorry
    /-
    simp[pcode.eval], refine ‚ü®pcode.succ, _‚ü©,
    rintros n,
    have : Prim ‚ä¢ formula.rew Œπ[0 ‚áù numeral n.head] (FÃá pcode.succ fin[#0] ‚âÉ SÃá #0),
      from (by_axiom Prim.succ) ‚äö (numeral n.head), simp[symbol.succ, term.rew] at this, 
    simp[show ‚àÄ i, n.nth i = n.head, by intros i; { simp[show i = 0, by simp] }], exact this },
  case nat.primrec'.nth : m i { simp[pcode.eval], refine ‚ü®pcode.nth i, _‚ü©,
    rintros n,
    have := provable.nfal_subst'_finitary (by_axiom (Prim.nth i)) (Œª i, numeral (n.nth i)),
     simp[symbol.fn‚ÇÅ, show ‚àÄ i : fin m, ‚Üëi < m, by intros i; exact i.property] at this,
    exact this
    -/ },
  case nat.primrec'.comp : m n g G pg pG IHg IHG { sorry
    /-
    simp at*,
    rcases IHg with ‚ü®cg, IHg‚ü©,
    rcases classical.skolem.mp IHG with ‚ü®cG, IHG‚ü©,
    refine ‚ü®pcode.comp cg cG, _‚ü©, rintros v,
    have eqn‚ÇÅ : ‚àÄ i : fin n, Prim ‚ä¢ FÃá (cG i) (Œª i, numeral (v.nth i)) ‚âÉ numeral (G i v),
    { intros i, exact IHG i v },
    have eqn‚ÇÇ : Prim ‚ä¢ FÃá cg (Œª i, numeral (G i v)) ‚âÉ numeral (g (of_fn (Œª i, G i v))),
    { have := IHg (of_fn (Œª (i : fin n), G i v)), simp at this, exact this },
    have eqn‚ÇÉ : Prim ‚ä¢ FÃá (cg.comp cG) (Œª i, numeral (v.nth i)) ‚âÉ FÃá cg (Œª i, FÃá (cG i) (Œª i, numeral (v.nth i))),
    { have := provable.nfal_subst'_finitary (by_axiom (Prim.comp cg cG)) (Œª (i : fin m), ‚Üë(numeral (v.nth i))),
      simp[symbol.fn‚ÇÅ, show ‚àÄ i : fin m, ‚Üëi < m, by intros i; exact i.property] at this, exact this },    
    calc FÃá (cg.comp cG) (Œª i, numeral (v.nth i))
             ‚âÉ[Prim] FÃá cg (Œª i, FÃá (cG i) (Œª i, numeral (v.nth i))) : eqn‚ÇÉ
         ... ‚âÉ[Prim] FÃá cg (Œª i, numeral (G i v))                   : (provable.function_ext' _ _ _) ‚®Ä (provable.conjunction' eqn‚ÇÅ)
         ... ‚âÉ[Prim] (numeral (g (of_fn (Œª i, G i v))))            : eqn‚ÇÇ
         
      -/   
         },
  case nat.primrec'.prec : n f g pf pg IHf IHg { 
    rcases IHf with ‚ü®cf, IHf‚ü©,
    rcases IHg with ‚ü®cg, IHg‚ü©,
    refine ‚ü®pcode.prec cf cg, _‚ü©, intros v, 
    simp at*,
    induction C : v.head with s IH generalizing v; simp[C],
    { sorry /-
    have := provable.nfal_subst'_finitary (by_axiom (Prim.prec_z cf cg)),
      have := provable.nfal_subst'_finitary (by_axiom (Prim.prec_z cf cg))  (Œª i, numeral (v.tail.nth i)),
      simp[symbol.fn‚ÇÅ, show ‚àÄ i : fin n, ‚Üëi < n, by intros i; exact i.property,
           show ‚àÄ i : fin n, ‚Üëi < n + 1, by intros i; exact nat.lt.step i.property, finitary.cons'] at this,
      have : Prim ‚ä¢ FÃá (cf.prec cg) (Œª i, numeral (v.nth i)) ‚âÉ FÃá cf (Œª i, numeral (v.tail.nth i)),
      { refine cast _ this, congr, 
        { ext ‚ü®i, i_lt‚ü©,cases i with i; simp[C],
          { simp [term.arity0_rew (show (ZÃá : term (LA + LC)).arity = 0, by refl)], refl },
          { simp[show i < n, from nat.succ_lt_succ_iff.mp i_lt] } },
        { ext ‚ü®i, i_p‚ü©, simp[vector.tail_nth] } },
      calc FÃá (cf.prec cg) (Œª i, numeral (v.nth i)) ‚âÉ[Prim] FÃá cf (Œª i, numeral (v.tail.nth i)) : this
                                               ... ‚âÉ[Prim] numeral (f v.tail) : IHf v.tail
    -/
     },
     {  }
    
   }
end

example {n i : ‚Ñï} : i + 1 < n + 1 ‚Üí i < n := by { exact nat.succ_lt_succ_iff.mp }

end prec
end arithmetic

end fopl